{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"c94cfc71f06d716f7caf321c23854cd536ad6abf","modified":1578478964944},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1578478964955},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1578478964955},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1578478964955},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1578478964955},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1578478964955},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1578478964955},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1578478964955},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1578478964955},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1578478964955},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1578478964955},{"_id":"themes/next/_config.yml","hash":"884bf4d470925e722527ec11585ed6db8066398d","modified":1578478964956},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1578478964956},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1578478964956},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1578478964959},{"_id":"source/_posts/DICOM Tag中文编码问题.md","hash":"6f21b20c81b0f9ff45ef731206660fefde47bdff","modified":1578543683980},{"_id":"source/_posts/Django实现单设备登录限制.md","hash":"e367b9d9969655fa7752e32b22b3268b4dda7ac7","modified":1578543503008},{"_id":"source/_posts/Django实现语言切换.md","hash":"ac609ea6cd4f69cbe9628af8d33d221a23097edb","modified":1578543531556},{"_id":"source/_posts/Docker部署Nginx + uWSGI + Django实践.md","hash":"5663361d5d60453ec619a827b801796099ff76d9","modified":1578543778473},{"_id":"source/_posts/Orthanc + OHIF 搭建DICOM web viewer.md","hash":"6dd1d48ee4b71ba73f28d829402ed590457b349e","modified":1578543659579},{"_id":"source/_posts/使用SimpleITK读取DICOM.md","hash":"30f1a31c67a64d3a6af115e365c1b3ca6406fdab","modified":1578543598593},{"_id":"source/about/About me.md","hash":"af33f17b81c0ec3e7869e5d71401ffd282fc74da","modified":1578478964943},{"_id":"source/about/index.md","hash":"b0f67fec0d6499d7929b42bcf759b64cf702e4de","modified":1578478964943},{"_id":"source/categories/index.md","hash":"a2233eca03c8a833cc26b0376dfef0bf78abb960","modified":1578478964943},{"_id":"source/tags/index.md","hash":"34aa544742154e500ec6184a636f47bedd2a9d71","modified":1578478964944},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1578478964956},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1578478964956},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1578478964956},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1578478964956},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1578478964956},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1578478964956},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1578478964956},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1578478964956},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1578478964956},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1578478964956},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1578478964956},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1578478964956},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1578478964956},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1578478964957},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1578478964959},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1578478964959},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1578478964959},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1578478964959},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1578478964959},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1578478964959},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1578478964959},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1578478964959},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1578478964961},{"_id":"themes/next/source/404.html","hash":"605c9d6d88f7c77e1d4c50d32b9c810bf0a9bc55","modified":1578478964961},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1578478964985},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1578478964985},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1578478964985},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964966},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578478964956},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578478964957},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1578478964957},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1578478964957},{"_id":"themes/next/layout/_macro/post.swig","hash":"72c10a0947b8a8fa9cfc89ad373341556eb956fe","modified":1578478964957},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1578478964957},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1578478964957},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1578478964957},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1578478964957},{"_id":"themes/next/layout/_partials/footer.swig","hash":"832732a234b3afdcb5d45f9e298d7af6c3131a2a","modified":1578478964957},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1578478964957},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1578478964957},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1578478964957},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1578478964957},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1578478964957},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1578478964957},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1578478964957},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1578478964958},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1578478964958},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1578478964958},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1578478964958},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1578478964958},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1578478964958},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1578478964958},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1578478964961},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1578478964961},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1578478964961},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1578478964961},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1578478964961},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1578478964961},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1578478964961},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1578478964961},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1578478964961},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1578478964965},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1578478964966},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1578478964966},{"_id":"themes/next/source/images/avatar.jpg","hash":"4755f966fda50b1f6d93e99a7b177953be612657","modified":1578478964966},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1578478964966},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1578478964966},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1578478964966},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1578478964966},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1578478964966},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1578478964966},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1578478964966},{"_id":"themes/next/source/images/favicon.ico","hash":"c94cfc71f06d716f7caf321c23854cd536ad6abf","modified":1578478964966},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578478964966},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578478964966},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1578478964966},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1578478964966},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1578478964966},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964958},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964958},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964964},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964964},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964964},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964965},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1578478964965},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1578478964957},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1578478964957},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1578478964957},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1578478964957},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1578478964957},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1578478964957},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1578478964957},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1578478964957},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1578478964957},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1578478964957},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1578478964958},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1578478964958},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1578478964958},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1578478964958},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1578478964958},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1578478964958},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1578478964958},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1578478964958},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1578478964958},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1578478964958},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1578478964959},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1578478964959},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1578478964959},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1578478964959},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"74c4f9c382a9ce8f221741ad2e3003c1446131e6","modified":1578478964964},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1578478964964},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1578478964964},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1578478964964},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1578478964965},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1578478964965},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1578478964965},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1578478964965},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1578478964968},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1578478964968},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1578478964968},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1578478964968},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1578478964968},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1578478964968},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1578478964968},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1578478964968},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1578478964968},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1578478964968},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1578478964968},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1578478964970},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1578478964972},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1578478964972},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1578478964974},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1578478964974},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1578478964974},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1578478964974},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1578478964974},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1578478964974},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1578478964974},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1578478964974},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1578478964974},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1578478964978},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1578478964979},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1578478964979},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1578478964979},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1578478964979},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1578478964979},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1578478964979},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1578478964980},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1578478964980},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1578478964980},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1578478964980},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1578478964981},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1578478964984},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1578478964984},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1578478964985},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1578478964985},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1578478964985},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1578478964979},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1578478964959},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1578478964959},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1578478964962},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1578478964963},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1578478964963},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1578478964964},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1578478964964},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1578478964964},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1578478964964},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1578478964965},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1578478964965},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1578478964968},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1578478964969},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1578478964970},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1578478964974},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1578478964974},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1578478964974},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1578478964974},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1578478964974},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1578478964975},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1578478964975},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1578478964975},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1578478964984},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1578478964984},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1578478964969},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1578478964969},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1578478964978},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1578478964978},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1578478964985},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1578478964961},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1578478964962},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1578478964963},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1578478964963},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1578478964964},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1578478964965},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1578478964969},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1578478964969},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1578478964969},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1578478964969},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1578478964972},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1578478964974},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578478964974},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1578478964974},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1578478964978},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1578478964976},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1578478964977},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1578478964972},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1578478964982},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1578478964978},{"_id":"public/about/About me.html","hash":"0fafbd8bd8bbb1a3c5dba52e49738ae56f3c34fe","modified":1578543083545},{"_id":"public/about/index.html","hash":"9dbd5961dfb91c5646154815698445d3af85bc19","modified":1578543083545},{"_id":"public/categories/index.html","hash":"a0aa3ee4aec9cf28e4a48d5663d6c99ea94c6cf4","modified":1578543083545},{"_id":"public/tags/index.html","hash":"97120adbdcc3f0b5b0607557f459c0177549e968","modified":1578543083545},{"_id":"public/2020/01/08/Django实现语言切换/index.html","hash":"9d7b6cba886641c0bb78e4b71650cde71fe071dd","modified":1578543083545},{"_id":"public/archives/index.html","hash":"c605d1814f57b5191a1b37207448d90ae354d8c8","modified":1578543837435},{"_id":"public/archives/2019/index.html","hash":"86ec801c5c211aec73d7806f4de5cc7d6267d31f","modified":1578543837435},{"_id":"public/archives/2019/05/index.html","hash":"495ff2f8e92d1a41ae5ec9bdc5f9378e20374e2c","modified":1578543083545},{"_id":"public/archives/2020/index.html","hash":"3a318d0fa6de8832f254ac36b098126ae649b068","modified":1578543083545},{"_id":"public/archives/2020/01/index.html","hash":"dec9184a1d5f9d891a38f7232f0ed9c7e15ba7fd","modified":1578543083545},{"_id":"public/categories/DICOM/index.html","hash":"1ec3dffdc1aac81a2151cdd5dd95bd37fac0914c","modified":1578543837435},{"_id":"public/categories/Django/index.html","hash":"c2a520b9242a9fc05b7f1d5074747e30f849523e","modified":1578543837435},{"_id":"public/categories/Docker/index.html","hash":"30e774739f80eeb23e55edc749aa28ca1e2bf56c","modified":1578543837435},{"_id":"public/tags/DICOM/index.html","hash":"853cc3382461ab87c5014ec9da237e544fcc5a44","modified":1578543837435},{"_id":"public/tags/Python/index.html","hash":"07750258834bc3bd6168eb058197fdb5179d59c8","modified":1578543837435},{"_id":"public/tags/pydicom/index.html","hash":"c6ba3fc85dbd44265ed29dc16afdad1d48515a9a","modified":1578543837435},{"_id":"public/tags/Django/index.html","hash":"67a99cdbf64c71219af7f9dece8360a82f4672f5","modified":1578543837435},{"_id":"public/tags/Docker/index.html","hash":"e307c921747cf9a85b1a1172ee470449f8e27bf8","modified":1578543837435},{"_id":"public/tags/Nginx/index.html","hash":"0eca42515d936115ca34642a1e790e8190ae058a","modified":1578543837435},{"_id":"public/tags/Orthanc/index.html","hash":"815128fdea2a4033033f009c8fe45cf454dfc1e9","modified":1578543837435},{"_id":"public/tags/OHIF/index.html","hash":"afef8678d84f5cd276522ce582a0369ec3cfa07b","modified":1578543837435},{"_id":"public/tags/SimpleITK/index.html","hash":"8b6b5f8838ae1445e94663383a277a2bf256574c","modified":1578543837435},{"_id":"public/2020/01/08/DICOM Tag中文编码问题/index.html","hash":"2a646d255afced352b03f7baa6e813c5ca73289e","modified":1578543083545},{"_id":"public/2020/01/08/Orthanc + OHIF 搭建DICOM web viewer/index.html","hash":"3f336ae25cd1500e1383440a1616810cb6cd6901","modified":1578543083545},{"_id":"public/2020/01/08/使用SimpleITK读取DICOM/index.html","hash":"5ea634c3ff3994757747689cdb24dc1aef7e7065","modified":1578543083545},{"_id":"public/2020/01/05/Django实现单设备登录限制/index.html","hash":"f2b21fc7e62adbc1372321de57363f303d04da8a","modified":1578543083545},{"_id":"public/2019/05/05/Docker部署Nginx + uWSGI + Django实践/index.html","hash":"6959a24db19555f720ed9d4ca1035ca2a28c9f57","modified":1578543083545},{"_id":"public/index.html","hash":"1b8a27211837a6addbcc64584a0e31cc1f4980ec","modified":1578543837435},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1578479094730},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1578479094730},{"_id":"public/images/avatar.jpg","hash":"4755f966fda50b1f6d93e99a7b177953be612657","modified":1578479094730},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1578479094730},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1578479094730},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1578479094730},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1578479094730},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1578479094730},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1578479094730},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1578479094730},{"_id":"public/images/favicon.ico","hash":"c94cfc71f06d716f7caf321c23854cd536ad6abf","modified":1578479094730},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578479094730},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1578479094730},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1578479094730},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1578479094730},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1578479094730},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1578479094730},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1578479094730},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1578479094730},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1578479094730},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1578479094730},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1578479094730},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1578479094730},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1578479094730},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1578479094730},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1578479094730},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1578479094730},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1578479094730},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1578479094730},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1578479094730},{"_id":"public/favicon.ico","hash":"c94cfc71f06d716f7caf321c23854cd536ad6abf","modified":1578479094730},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1578479094730},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1578479094730},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1578479094730},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1578479094730},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1578479094730},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1578479094730},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1578479094730},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1578479094730},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1578479094730},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1578479094730},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1578479094730},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1578479094730},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1578479094730},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1578479094730},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1578479094730},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1578479094730},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1578479094730},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1578479094730},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1578479094730},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1578479094730},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1578479094730},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1578479094730},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1578479094730},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1578479094730},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1578479094730},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1578479094730},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1578479094730},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1578479094730},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1578479094730},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1578479094730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1578479094730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1578479094730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1578479094730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1578479094730},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1578479094730},{"_id":"public/404.html","hash":"605c9d6d88f7c77e1d4c50d32b9c810bf0a9bc55","modified":1578479094730},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1578479094730},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1578479094730},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1578479094730},{"_id":"public/css/main.css","hash":"e6bc77d470012af9f1d3930fe0b7c65ac70d29ab","modified":1578479094730},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1578479094730},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1578479094730},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1578479094730},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1578479094730},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1578479094730},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1578479094730},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1578479094730},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1578479094730},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1578479094730},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1578479094730},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1578479094730},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1578479094730},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1578479094730},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1578479094730},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1578479094730},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1578479094730},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1578479094730},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1578479094730},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1578479094730},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1578479094730},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1578479094730},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1578479094730},{"_id":"source/_posts/使用python将PDF转换为DICOM格式.md","hash":"1d159e4ceeb44d6d095bc5c6dfeee031efd895f5","modified":1578543627632},{"_id":"public/2020/01/08/使用python将PDF转换为DICOM格式/index.html","hash":"e511d41776133f26a48bdee52bcf2fa212e391d5","modified":1578543083545},{"_id":"public/archives/2017/index.html","hash":"924266aaaa3c2fdef58c09402abdbc45c5a41f96","modified":1578543837435},{"_id":"public/archives/2017/09/index.html","hash":"139c830de5276f787c1b27e530d0110363bd8544","modified":1578543837435},{"_id":"public/archives/2018/index.html","hash":"5bc7042d6568406af547996906ac8cfa8942f952","modified":1578543837435},{"_id":"public/archives/2018/01/index.html","hash":"627c1945f52f29cbbb5567eca7d03c9fc422153e","modified":1578543837435},{"_id":"public/archives/2019/06/index.html","hash":"6a46b3b0ceba3f9bfa4380705d02ac0141ad932e","modified":1578543837435},{"_id":"public/archives/2019/10/index.html","hash":"10dd738632241c889de6587f16550e12fc2218af","modified":1578543837435},{"_id":"public/archives/2019/12/index.html","hash":"275291f131056ce17e747caa6207ea19fed75fe8","modified":1578543837435},{"_id":"public/2019/12/10/Docker部署Nginx + uWSGI + Django实践/index.html","hash":"20240b7a4609abc20bc8d15e68fdb45f4490473a","modified":1578543837435},{"_id":"public/2019/12/08/Orthanc + OHIF 搭建DICOM web viewer/index.html","hash":"7f03532e66cb930c21ba340cd0e87cb916de1f9e","modified":1578543837435},{"_id":"public/2019/10/15/DICOM Tag中文编码问题/index.html","hash":"b4f0cb6f57f7ad80b6d075231402fbcbd122c4b0","modified":1578543837435},{"_id":"public/2019/06/25/使用python将PDF转换为DICOM格式/index.html","hash":"f820e59d2c0e051eeebd6490800d0883e6801b22","modified":1578543837435},{"_id":"public/2019/06/08/使用SimpleITK读取DICOM/index.html","hash":"bd6d2b730ad795c3cfc8147a6a4ec38ba2d73737","modified":1578543837435},{"_id":"public/2018/01/08/Django实现语言切换/index.html","hash":"7409ef40faf7054fae0f2862023511e58c27e5b9","modified":1578543837435},{"_id":"public/2017/09/05/Django实现单设备登录限制/index.html","hash":"f1b2bf6f1c7f35a802c14ab5813bc4646c47b59d","modified":1578543837435}],"Category":[{"name":"DICOM","_id":"ck555p4zz0004osab58qycenb"},{"name":"Django","_id":"ck555p50e000bosab92zg5fdo"},{"name":"Docker","_id":"ck555p50m000josab8miwa740"}],"Data":[],"Page":[{"_content":"# About me\n\n** **\n**    我是谁**：    孙瑞\n\n**          我来自哪里**： 湖北黄冈\n\n**                    我的学校**：    湖北工业大学\n\n**                    我的爱好**：    游戏、篮球、书法、骑行\n\n**                                      微信**：       sr464521059\n\n\n\n","source":"about/About me.md","raw":"# About me\n\n** **\n**    我是谁**：    孙瑞\n\n**          我来自哪里**： 湖北黄冈\n\n**                    我的学校**：    湖北工业大学\n\n**                    我的爱好**：    游戏、篮球、书法、骑行\n\n**                                      微信**：       sr464521059\n\n\n\n","date":"2020-01-08T10:22:44.943Z","updated":"2020-01-08T10:22:44.943Z","path":"about/About me.html","title":"","comments":1,"layout":"page","_id":"ck555p4zk0001osab6wda9ud1","content":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><hr>\n<p>**    我是谁**：    孙瑞</p>\n<p>**          我来自哪里**： 湖北黄冈</p>\n<p>**                    我的学校**：    湖北工业大学</p>\n<p>**                    我的爱好**：    游戏、篮球、书法、骑行</p>\n<p>**                                      微信**：       sr464521059</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><hr>\n<p>**    我是谁**：    孙瑞</p>\n<p>**          我来自哪里**： 湖北黄冈</p>\n<p>**                    我的学校**：    湖北工业大学</p>\n<p>**                    我的爱好**：    游戏、篮球、书法、骑行</p>\n<p>**                                      微信**：       sr464521059</p>\n"},{"title":"About me","date":"2020-01-05T09:41:32.000Z","type":"about","_content":"\n\n**我是谁**：　　　　孙瑞\n\n**我来自哪里**：　　湖北黄冈\n\n**我的工作**：　　　Python Coder\n\n**我的学校**：　　　湖北工业大学\n\n**我的爱好**：　　　游戏、篮球、书法、骑行\n\n**微信**：　　　　　sr464521059\n\n\n","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2020-01-05 17:41:32\ntype: \"about\"\n---\n\n\n**我是谁**：　　　　孙瑞\n\n**我来自哪里**：　　湖北黄冈\n\n**我的工作**：　　　Python Coder\n\n**我的学校**：　　　湖北工业大学\n\n**我的爱好**：　　　游戏、篮球、书法、骑行\n\n**微信**：　　　　　sr464521059\n\n\n","updated":"2020-01-08T10:22:44.943Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck555p4zp0003osab0to0httv","content":"<p><strong>我是谁</strong>：　　　　孙瑞</p>\n<p><strong>我来自哪里</strong>：　　湖北黄冈</p>\n<p><strong>我的工作</strong>：　　　Python Coder</p>\n<p><strong>我的学校</strong>：　　　湖北工业大学</p>\n<p><strong>我的爱好</strong>：　　　游戏、篮球、书法、骑行</p>\n<p><strong>微信</strong>：　　　　　sr464521059</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>我是谁</strong>：　　　　孙瑞</p>\n<p><strong>我来自哪里</strong>：　　湖北黄冈</p>\n<p><strong>我的工作</strong>：　　　Python Coder</p>\n<p><strong>我的学校</strong>：　　　湖北工业大学</p>\n<p><strong>我的爱好</strong>：　　　游戏、篮球、书法、骑行</p>\n<p><strong>微信</strong>：　　　　　sr464521059</p>\n"},{"title":"categories","date":"2020-01-05T08:43:33.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-05 16:43:33\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-01-08T10:22:44.943Z","path":"categories/index.html","layout":"page","_id":"ck555p5070007osabakdsh25f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-01-05T08:41:12.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-05 16:41:12\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-01-08T10:22:44.944Z","path":"tags/index.html","layout":"page","_id":"ck555p50b0009osab7qscbjya","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"DICOM Tag中文编码问题","date":"2019-10-15T09:38:49.000Z","_content":"\nDICOM Tag信息一般都以英文存储，出现中文时，可能会出现显示为乱码的情况，而导致乱码的原因通常是，存储的信息含有中文，而DICOM tag中指定的编码格式`SpecificCharacterSet`并不支持中文.\n\n<!--more-->\n\n## 编码问题\n\n常见的DICOM tag编码格式一般是`ISO_IR 100`，存储于`SpecificCharacterSet`（即0008,0005） tag中，该编码格式并不支持中文，因此DICOM信息中出现中文时，最好将这个tag的值改为`ISO_IR 192`即UTF-8编码。常见的DICOM tag编码对应关系可参考：\n\n```python\n\t'ISO_IR 100': 'latin_1',\n    'ISO_IR 101': 'iso8859_2',\n    'ISO_IR 109': 'iso8859_3',\n    'ISO_IR 110': 'iso8859_4',\n    'ISO_IR 126': 'iso_ir_126',  # Greek\n    'ISO_IR 127': 'iso_ir_127',  # Arabic\n    'ISO_IR 138': 'iso_ir_138',  # Hebrew\n    'ISO_IR 144': 'iso_ir_144',  # Russian\n    'ISO_IR 148': 'iso_ir_148',  # Turkish\n    'ISO_IR 166': 'iso_ir_166',  # Thai\n    'ISO 2022 IR 6': 'iso8859',  # alias for latin_1 too\n    'ISO 2022 IR 13': 'shift_jis',\n    'ISO 2022 IR 87': 'iso2022_jp',\n    'ISO 2022 IR 100': 'latin_1',\n    'ISO 2022 IR 101': 'iso8859_2',\n    'ISO 2022 IR 109': 'iso8859_3',\n    'ISO 2022 IR 110': 'iso8859_4',\n    'ISO 2022 IR 126': 'iso_ir_126',\n    'ISO 2022 IR 127': 'iso_ir_127',\n    'ISO 2022 IR 138': 'iso_ir_138',\n    'ISO 2022 IR 144': 'iso_ir_144',\n    'ISO 2022 IR 148': 'iso_ir_148',\n    'ISO 2022 IR 149': 'euc_kr',\n    'ISO 2022 IR 159': 'iso2022_jp_2',\n    'ISO 2022 IR 166': 'iso_ir_166',\n    'ISO 2022 IR 58': 'iso_ir_58',\n    'ISO_IR 192': 'UTF8',  # from Chinese example, 2008 PS3.5 Annex J p1-4\n    'GB18030': 'GB18030',\n    'ISO 2022 GBK': 'GBK',  # from DICOM correction CP1234\n    'ISO 2022 58': 'GB2312',  # from DICOM correction CP1234\n    'GBK': 'GBK',  # from DICOM correction CP1234\n```\n\n## 使用SimpleITK读取DICOM tag\nDICOM tag中含有中文时，可以利用SimpleITK读取Tag信息并转换为GBK编码，随后可以使用pydicom改变`SpecificCharacterSet`的值为`ISO_IR 192`(暂时未找到SimpleITK改变DICOM tag的方法)。以下是读取DICOM tag中`PatientName`并改变编码的示例：\n```python\nimport SimpleITK as sitk\n\ndcm_path = '/path_to_dcm'\ndcm = sitk.ReadImage(dcm_path)\npatient_name = dcm.GetMetaData('0010|0010').strip().encode(\"utf-8\", \"surrogateescape\").decode('gbk', 'replace')\n\nds = pydicom.dcmread(dcm_path)\nds.SpecificCharacterSet = 'ISO_IR 192'\nds.PatientName = patient_name\nds.save_as(dcm_path)\n\n```\n\n","source":"_posts/DICOM Tag中文编码问题.md","raw":"---\ntitle: DICOM Tag中文编码问题\ndate: 2019-10-15 17:38:49\ntags: [DICOM,Python,pydicom]\ncategories: DICOM\n---\n\nDICOM Tag信息一般都以英文存储，出现中文时，可能会出现显示为乱码的情况，而导致乱码的原因通常是，存储的信息含有中文，而DICOM tag中指定的编码格式`SpecificCharacterSet`并不支持中文.\n\n<!--more-->\n\n## 编码问题\n\n常见的DICOM tag编码格式一般是`ISO_IR 100`，存储于`SpecificCharacterSet`（即0008,0005） tag中，该编码格式并不支持中文，因此DICOM信息中出现中文时，最好将这个tag的值改为`ISO_IR 192`即UTF-8编码。常见的DICOM tag编码对应关系可参考：\n\n```python\n\t'ISO_IR 100': 'latin_1',\n    'ISO_IR 101': 'iso8859_2',\n    'ISO_IR 109': 'iso8859_3',\n    'ISO_IR 110': 'iso8859_4',\n    'ISO_IR 126': 'iso_ir_126',  # Greek\n    'ISO_IR 127': 'iso_ir_127',  # Arabic\n    'ISO_IR 138': 'iso_ir_138',  # Hebrew\n    'ISO_IR 144': 'iso_ir_144',  # Russian\n    'ISO_IR 148': 'iso_ir_148',  # Turkish\n    'ISO_IR 166': 'iso_ir_166',  # Thai\n    'ISO 2022 IR 6': 'iso8859',  # alias for latin_1 too\n    'ISO 2022 IR 13': 'shift_jis',\n    'ISO 2022 IR 87': 'iso2022_jp',\n    'ISO 2022 IR 100': 'latin_1',\n    'ISO 2022 IR 101': 'iso8859_2',\n    'ISO 2022 IR 109': 'iso8859_3',\n    'ISO 2022 IR 110': 'iso8859_4',\n    'ISO 2022 IR 126': 'iso_ir_126',\n    'ISO 2022 IR 127': 'iso_ir_127',\n    'ISO 2022 IR 138': 'iso_ir_138',\n    'ISO 2022 IR 144': 'iso_ir_144',\n    'ISO 2022 IR 148': 'iso_ir_148',\n    'ISO 2022 IR 149': 'euc_kr',\n    'ISO 2022 IR 159': 'iso2022_jp_2',\n    'ISO 2022 IR 166': 'iso_ir_166',\n    'ISO 2022 IR 58': 'iso_ir_58',\n    'ISO_IR 192': 'UTF8',  # from Chinese example, 2008 PS3.5 Annex J p1-4\n    'GB18030': 'GB18030',\n    'ISO 2022 GBK': 'GBK',  # from DICOM correction CP1234\n    'ISO 2022 58': 'GB2312',  # from DICOM correction CP1234\n    'GBK': 'GBK',  # from DICOM correction CP1234\n```\n\n## 使用SimpleITK读取DICOM tag\nDICOM tag中含有中文时，可以利用SimpleITK读取Tag信息并转换为GBK编码，随后可以使用pydicom改变`SpecificCharacterSet`的值为`ISO_IR 192`(暂时未找到SimpleITK改变DICOM tag的方法)。以下是读取DICOM tag中`PatientName`并改变编码的示例：\n```python\nimport SimpleITK as sitk\n\ndcm_path = '/path_to_dcm'\ndcm = sitk.ReadImage(dcm_path)\npatient_name = dcm.GetMetaData('0010|0010').strip().encode(\"utf-8\", \"surrogateescape\").decode('gbk', 'replace')\n\nds = pydicom.dcmread(dcm_path)\nds.SpecificCharacterSet = 'ISO_IR 192'\nds.PatientName = patient_name\nds.save_as(dcm_path)\n\n```\n\n","slug":"DICOM Tag中文编码问题","published":1,"updated":"2020-01-09T04:21:23.980Z","_id":"ck555p4z80000osab83uq6rj4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>DICOM Tag信息一般都以英文存储，出现中文时，可能会出现显示为乱码的情况，而导致乱码的原因通常是，存储的信息含有中文，而DICOM tag中指定的编码格式<code>SpecificCharacterSet</code>并不支持中文.</p>\n<a id=\"more\"></a>\n\n<h2 id=\"编码问题\"><a href=\"#编码问题\" class=\"headerlink\" title=\"编码问题\"></a>编码问题</h2><p>常见的DICOM tag编码格式一般是<code>ISO_IR 100</code>，存储于<code>SpecificCharacterSet</code>（即0008,0005） tag中，该编码格式并不支持中文，因此DICOM信息中出现中文时，最好将这个tag的值改为<code>ISO_IR 192</code>即UTF-8编码。常见的DICOM tag编码对应关系可参考：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ISO_IR 100'</span>: <span class=\"string\">'latin_1'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 101'</span>: <span class=\"string\">'iso8859_2'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 109'</span>: <span class=\"string\">'iso8859_3'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 110'</span>: <span class=\"string\">'iso8859_4'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 126'</span>: <span class=\"string\">'iso_ir_126'</span>,  <span class=\"comment\"># Greek</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 127'</span>: <span class=\"string\">'iso_ir_127'</span>,  <span class=\"comment\"># Arabic</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 138'</span>: <span class=\"string\">'iso_ir_138'</span>,  <span class=\"comment\"># Hebrew</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 144'</span>: <span class=\"string\">'iso_ir_144'</span>,  <span class=\"comment\"># Russian</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 148'</span>: <span class=\"string\">'iso_ir_148'</span>,  <span class=\"comment\"># Turkish</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 166'</span>: <span class=\"string\">'iso_ir_166'</span>,  <span class=\"comment\"># Thai</span></span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 6'</span>: <span class=\"string\">'iso8859'</span>,  <span class=\"comment\"># alias for latin_1 too</span></span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 13'</span>: <span class=\"string\">'shift_jis'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 87'</span>: <span class=\"string\">'iso2022_jp'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 100'</span>: <span class=\"string\">'latin_1'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 101'</span>: <span class=\"string\">'iso8859_2'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 109'</span>: <span class=\"string\">'iso8859_3'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 110'</span>: <span class=\"string\">'iso8859_4'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 126'</span>: <span class=\"string\">'iso_ir_126'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 127'</span>: <span class=\"string\">'iso_ir_127'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 138'</span>: <span class=\"string\">'iso_ir_138'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 144'</span>: <span class=\"string\">'iso_ir_144'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 148'</span>: <span class=\"string\">'iso_ir_148'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 149'</span>: <span class=\"string\">'euc_kr'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 159'</span>: <span class=\"string\">'iso2022_jp_2'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 166'</span>: <span class=\"string\">'iso_ir_166'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 58'</span>: <span class=\"string\">'iso_ir_58'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 192'</span>: <span class=\"string\">'UTF8'</span>,  <span class=\"comment\"># from Chinese example, 2008 PS3.5 Annex J p1-4</span></span><br><span class=\"line\">   <span class=\"string\">'GB18030'</span>: <span class=\"string\">'GB18030'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 GBK'</span>: <span class=\"string\">'GBK'</span>,  <span class=\"comment\"># from DICOM correction CP1234</span></span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 58'</span>: <span class=\"string\">'GB2312'</span>,  <span class=\"comment\"># from DICOM correction CP1234</span></span><br><span class=\"line\">   <span class=\"string\">'GBK'</span>: <span class=\"string\">'GBK'</span>,  <span class=\"comment\"># from DICOM correction CP1234</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用SimpleITK读取DICOM-tag\"><a href=\"#使用SimpleITK读取DICOM-tag\" class=\"headerlink\" title=\"使用SimpleITK读取DICOM tag\"></a>使用SimpleITK读取DICOM tag</h2><p>DICOM tag中含有中文时，可以利用SimpleITK读取Tag信息并转换为GBK编码，随后可以使用pydicom改变<code>SpecificCharacterSet</code>的值为<code>ISO_IR 192</code>(暂时未找到SimpleITK改变DICOM tag的方法)。以下是读取DICOM tag中<code>PatientName</code>并改变编码的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\">dcm_path = <span class=\"string\">'/path_to_dcm'</span></span><br><span class=\"line\">dcm = sitk.ReadImage(dcm_path)</span><br><span class=\"line\">patient_name = dcm.GetMetaData(<span class=\"string\">'0010|0010'</span>).strip().encode(<span class=\"string\">\"utf-8\"</span>, <span class=\"string\">\"surrogateescape\"</span>).decode(<span class=\"string\">'gbk'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ds = pydicom.dcmread(dcm_path)</span><br><span class=\"line\">ds.SpecificCharacterSet = <span class=\"string\">'ISO_IR 192'</span></span><br><span class=\"line\">ds.PatientName = patient_name</span><br><span class=\"line\">ds.save_as(dcm_path)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>DICOM Tag信息一般都以英文存储，出现中文时，可能会出现显示为乱码的情况，而导致乱码的原因通常是，存储的信息含有中文，而DICOM tag中指定的编码格式<code>SpecificCharacterSet</code>并不支持中文.</p>","more":"<h2 id=\"编码问题\"><a href=\"#编码问题\" class=\"headerlink\" title=\"编码问题\"></a>编码问题</h2><p>常见的DICOM tag编码格式一般是<code>ISO_IR 100</code>，存储于<code>SpecificCharacterSet</code>（即0008,0005） tag中，该编码格式并不支持中文，因此DICOM信息中出现中文时，最好将这个tag的值改为<code>ISO_IR 192</code>即UTF-8编码。常见的DICOM tag编码对应关系可参考：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'ISO_IR 100'</span>: <span class=\"string\">'latin_1'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 101'</span>: <span class=\"string\">'iso8859_2'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 109'</span>: <span class=\"string\">'iso8859_3'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 110'</span>: <span class=\"string\">'iso8859_4'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 126'</span>: <span class=\"string\">'iso_ir_126'</span>,  <span class=\"comment\"># Greek</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 127'</span>: <span class=\"string\">'iso_ir_127'</span>,  <span class=\"comment\"># Arabic</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 138'</span>: <span class=\"string\">'iso_ir_138'</span>,  <span class=\"comment\"># Hebrew</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 144'</span>: <span class=\"string\">'iso_ir_144'</span>,  <span class=\"comment\"># Russian</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 148'</span>: <span class=\"string\">'iso_ir_148'</span>,  <span class=\"comment\"># Turkish</span></span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 166'</span>: <span class=\"string\">'iso_ir_166'</span>,  <span class=\"comment\"># Thai</span></span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 6'</span>: <span class=\"string\">'iso8859'</span>,  <span class=\"comment\"># alias for latin_1 too</span></span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 13'</span>: <span class=\"string\">'shift_jis'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 87'</span>: <span class=\"string\">'iso2022_jp'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 100'</span>: <span class=\"string\">'latin_1'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 101'</span>: <span class=\"string\">'iso8859_2'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 109'</span>: <span class=\"string\">'iso8859_3'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 110'</span>: <span class=\"string\">'iso8859_4'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 126'</span>: <span class=\"string\">'iso_ir_126'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 127'</span>: <span class=\"string\">'iso_ir_127'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 138'</span>: <span class=\"string\">'iso_ir_138'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 144'</span>: <span class=\"string\">'iso_ir_144'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 148'</span>: <span class=\"string\">'iso_ir_148'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 149'</span>: <span class=\"string\">'euc_kr'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 159'</span>: <span class=\"string\">'iso2022_jp_2'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 166'</span>: <span class=\"string\">'iso_ir_166'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 IR 58'</span>: <span class=\"string\">'iso_ir_58'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO_IR 192'</span>: <span class=\"string\">'UTF8'</span>,  <span class=\"comment\"># from Chinese example, 2008 PS3.5 Annex J p1-4</span></span><br><span class=\"line\">   <span class=\"string\">'GB18030'</span>: <span class=\"string\">'GB18030'</span>,</span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 GBK'</span>: <span class=\"string\">'GBK'</span>,  <span class=\"comment\"># from DICOM correction CP1234</span></span><br><span class=\"line\">   <span class=\"string\">'ISO 2022 58'</span>: <span class=\"string\">'GB2312'</span>,  <span class=\"comment\"># from DICOM correction CP1234</span></span><br><span class=\"line\">   <span class=\"string\">'GBK'</span>: <span class=\"string\">'GBK'</span>,  <span class=\"comment\"># from DICOM correction CP1234</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用SimpleITK读取DICOM-tag\"><a href=\"#使用SimpleITK读取DICOM-tag\" class=\"headerlink\" title=\"使用SimpleITK读取DICOM tag\"></a>使用SimpleITK读取DICOM tag</h2><p>DICOM tag中含有中文时，可以利用SimpleITK读取Tag信息并转换为GBK编码，随后可以使用pydicom改变<code>SpecificCharacterSet</code>的值为<code>ISO_IR 192</code>(暂时未找到SimpleITK改变DICOM tag的方法)。以下是读取DICOM tag中<code>PatientName</code>并改变编码的示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\">dcm_path = <span class=\"string\">'/path_to_dcm'</span></span><br><span class=\"line\">dcm = sitk.ReadImage(dcm_path)</span><br><span class=\"line\">patient_name = dcm.GetMetaData(<span class=\"string\">'0010|0010'</span>).strip().encode(<span class=\"string\">\"utf-8\"</span>, <span class=\"string\">\"surrogateescape\"</span>).decode(<span class=\"string\">'gbk'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ds = pydicom.dcmread(dcm_path)</span><br><span class=\"line\">ds.SpecificCharacterSet = <span class=\"string\">'ISO_IR 192'</span></span><br><span class=\"line\">ds.PatientName = patient_name</span><br><span class=\"line\">ds.save_as(dcm_path)</span><br></pre></td></tr></table></figure>"},{"title":"Django实现单设备登录限制","date":"2017-09-05T12:58:59.000Z","_content":"\n本文旨在介绍Django项目实现单设备登录限制的一种方法，基于Django的session机制。\n\n<!--more-->\n\n## 基本思路\n要保证同一账号只能在一台设备登录，基本思路就是维护一个用户登录状态记录，用户每次请求或登录时，先从登录状态记录中查询，如果该账号已经在其他设备登录，则删除或禁止之前的记录。\n## 使用Mysql数据表\n为保证用户账号安全，限制同一账号只能在唯一一台设备登录，之前的实现思路是建立一个用户登录状态数据表，每次用户登录都根据用户id查询，判断是否有用户id相同的记录，有则删除，同时，在用户请求后端视图时，从session中取出用户id，再查询登录状态记录表，如果该session对应的记录已被删除，则失效该session。\n实际测试时发现，维护用户登录状态记录表过于繁琐，并且由于用户每次请求都需要查询数据库，对性能也有一定影响，该方案不太可行。\n\n## 使用Redis缓存session\nDjango项目可以使用Redis作为缓存数据库，Redis是内存数据库，它读写速度快、灵活方便的特点很适合少量数据频繁读写。因此，可以将session保存在Redis中，用户登录时，首先生成session，然后查询是否有用户id相同的记录，如果用户id相同而session_key不同，则说明该账号已经在其他地方登录，此时直接删除之前的session，只保留当前session，因此之前登录的用户就会被挤出。关键代码如下：\n\n```python\n# 获取当前session的session_key\nsession_key = request.session.session_key\n\n# 获取Redis中所有key\nkey_list = cache.keys(\"*\")\n\n# 遍历获取到的所有key，通过正则筛选django的session记录\nfor key in key_list:\n    s_key = re.match(r'django\\.contrib\\.sessions\\.cache(.*)', key)\n    # 如果session_key和当前session不同，则进行判断\n    if s_key and s_key.group(1) != session_key:\n        cache_session_dict = cache.get(key)\n        # 如果session信息中保存的user_id和当前用户id相同，则表明该账号已登录\n        if cache_session_dict.get('user_id') == user.id:\n            cache.delete(key)\n            logger.info('Account [{}] has logged in elsewhere, delete old session [{}]'.format(username, key))\n            else:\n                continue\n```\n\n## 视图装饰器\n为了实现登录状态的判断，可以在Django视图上加上装饰器，从而判断每次request对应的session是否被删除，同时进行其他权限校验。\n\n```python\ndef auth_required(perm):\n    def decorator(view_func):\n        def _wrapped_view(request, *args, **kwargs):\n\n            try:\n                session_key = request.session.session_key\n\n                # session_flag = Session.objects.filter(session_key=session_key)\n                if not session_key:\n                    return JsonResponse({\"respCode\": 4001})\n                else:\n                    role = request.session.get(\"role_id\")\n                    if not role:\n                        return JsonResponse({\"respCode\": 4002})\n                    else:\n                        if int(role) > int(perm):\n                            return JsonResponse({\"respCode\": 4003})\n\n            except Exception as e:\n                logger.error(e)\n                return JsonResponse({\"respCode\": 4004})\n\n            return view_func(request, *args, **kwargs)\n        return _wrapped_view\n    return decorator\n```\n\n","source":"_posts/Django实现单设备登录限制.md","raw":"---\ntitle: Django实现单设备登录限制\ndate: 2017-09-05 20:58:59\ntags: [Django,Python]\ncategories: Django\n---\n\n本文旨在介绍Django项目实现单设备登录限制的一种方法，基于Django的session机制。\n\n<!--more-->\n\n## 基本思路\n要保证同一账号只能在一台设备登录，基本思路就是维护一个用户登录状态记录，用户每次请求或登录时，先从登录状态记录中查询，如果该账号已经在其他设备登录，则删除或禁止之前的记录。\n## 使用Mysql数据表\n为保证用户账号安全，限制同一账号只能在唯一一台设备登录，之前的实现思路是建立一个用户登录状态数据表，每次用户登录都根据用户id查询，判断是否有用户id相同的记录，有则删除，同时，在用户请求后端视图时，从session中取出用户id，再查询登录状态记录表，如果该session对应的记录已被删除，则失效该session。\n实际测试时发现，维护用户登录状态记录表过于繁琐，并且由于用户每次请求都需要查询数据库，对性能也有一定影响，该方案不太可行。\n\n## 使用Redis缓存session\nDjango项目可以使用Redis作为缓存数据库，Redis是内存数据库，它读写速度快、灵活方便的特点很适合少量数据频繁读写。因此，可以将session保存在Redis中，用户登录时，首先生成session，然后查询是否有用户id相同的记录，如果用户id相同而session_key不同，则说明该账号已经在其他地方登录，此时直接删除之前的session，只保留当前session，因此之前登录的用户就会被挤出。关键代码如下：\n\n```python\n# 获取当前session的session_key\nsession_key = request.session.session_key\n\n# 获取Redis中所有key\nkey_list = cache.keys(\"*\")\n\n# 遍历获取到的所有key，通过正则筛选django的session记录\nfor key in key_list:\n    s_key = re.match(r'django\\.contrib\\.sessions\\.cache(.*)', key)\n    # 如果session_key和当前session不同，则进行判断\n    if s_key and s_key.group(1) != session_key:\n        cache_session_dict = cache.get(key)\n        # 如果session信息中保存的user_id和当前用户id相同，则表明该账号已登录\n        if cache_session_dict.get('user_id') == user.id:\n            cache.delete(key)\n            logger.info('Account [{}] has logged in elsewhere, delete old session [{}]'.format(username, key))\n            else:\n                continue\n```\n\n## 视图装饰器\n为了实现登录状态的判断，可以在Django视图上加上装饰器，从而判断每次request对应的session是否被删除，同时进行其他权限校验。\n\n```python\ndef auth_required(perm):\n    def decorator(view_func):\n        def _wrapped_view(request, *args, **kwargs):\n\n            try:\n                session_key = request.session.session_key\n\n                # session_flag = Session.objects.filter(session_key=session_key)\n                if not session_key:\n                    return JsonResponse({\"respCode\": 4001})\n                else:\n                    role = request.session.get(\"role_id\")\n                    if not role:\n                        return JsonResponse({\"respCode\": 4002})\n                    else:\n                        if int(role) > int(perm):\n                            return JsonResponse({\"respCode\": 4003})\n\n            except Exception as e:\n                logger.error(e)\n                return JsonResponse({\"respCode\": 4004})\n\n            return view_func(request, *args, **kwargs)\n        return _wrapped_view\n    return decorator\n```\n\n","slug":"Django实现单设备登录限制","published":1,"updated":"2020-01-09T04:18:23.008Z","_id":"ck555p4zn0002osabcndj62mk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文旨在介绍Django项目实现单设备登录限制的一种方法，基于Django的session机制。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>要保证同一账号只能在一台设备登录，基本思路就是维护一个用户登录状态记录，用户每次请求或登录时，先从登录状态记录中查询，如果该账号已经在其他设备登录，则删除或禁止之前的记录。</p>\n<h2 id=\"使用Mysql数据表\"><a href=\"#使用Mysql数据表\" class=\"headerlink\" title=\"使用Mysql数据表\"></a>使用Mysql数据表</h2><p>为保证用户账号安全，限制同一账号只能在唯一一台设备登录，之前的实现思路是建立一个用户登录状态数据表，每次用户登录都根据用户id查询，判断是否有用户id相同的记录，有则删除，同时，在用户请求后端视图时，从session中取出用户id，再查询登录状态记录表，如果该session对应的记录已被删除，则失效该session。<br>实际测试时发现，维护用户登录状态记录表过于繁琐，并且由于用户每次请求都需要查询数据库，对性能也有一定影响，该方案不太可行。</p>\n<h2 id=\"使用Redis缓存session\"><a href=\"#使用Redis缓存session\" class=\"headerlink\" title=\"使用Redis缓存session\"></a>使用Redis缓存session</h2><p>Django项目可以使用Redis作为缓存数据库，Redis是内存数据库，它读写速度快、灵活方便的特点很适合少量数据频繁读写。因此，可以将session保存在Redis中，用户登录时，首先生成session，然后查询是否有用户id相同的记录，如果用户id相同而session_key不同，则说明该账号已经在其他地方登录，此时直接删除之前的session，只保留当前session，因此之前登录的用户就会被挤出。关键代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前session的session_key</span></span><br><span class=\"line\">session_key = request.session.session_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Redis中所有key</span></span><br><span class=\"line\">key_list = cache.keys(<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历获取到的所有key，通过正则筛选django的session记录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> key_list:</span><br><span class=\"line\">    s_key = re.match(<span class=\"string\">r'django\\.contrib\\.sessions\\.cache(.*)'</span>, key)</span><br><span class=\"line\">    <span class=\"comment\"># 如果session_key和当前session不同，则进行判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> s_key <span class=\"keyword\">and</span> s_key.group(<span class=\"number\">1</span>) != session_key:</span><br><span class=\"line\">        cache_session_dict = cache.get(key)</span><br><span class=\"line\">        <span class=\"comment\"># 如果session信息中保存的user_id和当前用户id相同，则表明该账号已登录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cache_session_dict.get(<span class=\"string\">'user_id'</span>) == user.id:</span><br><span class=\"line\">            cache.delete(key)</span><br><span class=\"line\">            logger.info(<span class=\"string\">'Account [&#123;&#125;] has logged in elsewhere, delete old session [&#123;&#125;]'</span>.format(username, key))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视图装饰器\"><a href=\"#视图装饰器\" class=\"headerlink\" title=\"视图装饰器\"></a>视图装饰器</h2><p>为了实现登录状态的判断，可以在Django视图上加上装饰器，从而判断每次request对应的session是否被删除，同时进行其他权限校验。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_required</span><span class=\"params\">(perm)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(view_func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_wrapped_view</span><span class=\"params\">(request, *args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                session_key = request.session.session_key</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># session_flag = Session.objects.filter(session_key=session_key)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> session_key:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4001</span>&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    role = request.session.get(<span class=\"string\">\"role_id\"</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> role:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4002</span>&#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> int(role) &gt; int(perm):</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4003</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                logger.error(e)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4004</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> view_func(request, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _wrapped_view</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>本文旨在介绍Django项目实现单设备登录限制的一种方法，基于Django的session机制。</p>","more":"<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><p>要保证同一账号只能在一台设备登录，基本思路就是维护一个用户登录状态记录，用户每次请求或登录时，先从登录状态记录中查询，如果该账号已经在其他设备登录，则删除或禁止之前的记录。</p>\n<h2 id=\"使用Mysql数据表\"><a href=\"#使用Mysql数据表\" class=\"headerlink\" title=\"使用Mysql数据表\"></a>使用Mysql数据表</h2><p>为保证用户账号安全，限制同一账号只能在唯一一台设备登录，之前的实现思路是建立一个用户登录状态数据表，每次用户登录都根据用户id查询，判断是否有用户id相同的记录，有则删除，同时，在用户请求后端视图时，从session中取出用户id，再查询登录状态记录表，如果该session对应的记录已被删除，则失效该session。<br>实际测试时发现，维护用户登录状态记录表过于繁琐，并且由于用户每次请求都需要查询数据库，对性能也有一定影响，该方案不太可行。</p>\n<h2 id=\"使用Redis缓存session\"><a href=\"#使用Redis缓存session\" class=\"headerlink\" title=\"使用Redis缓存session\"></a>使用Redis缓存session</h2><p>Django项目可以使用Redis作为缓存数据库，Redis是内存数据库，它读写速度快、灵活方便的特点很适合少量数据频繁读写。因此，可以将session保存在Redis中，用户登录时，首先生成session，然后查询是否有用户id相同的记录，如果用户id相同而session_key不同，则说明该账号已经在其他地方登录，此时直接删除之前的session，只保留当前session，因此之前登录的用户就会被挤出。关键代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取当前session的session_key</span></span><br><span class=\"line\">session_key = request.session.session_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取Redis中所有key</span></span><br><span class=\"line\">key_list = cache.keys(<span class=\"string\">\"*\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历获取到的所有key，通过正则筛选django的session记录</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> key_list:</span><br><span class=\"line\">    s_key = re.match(<span class=\"string\">r'django\\.contrib\\.sessions\\.cache(.*)'</span>, key)</span><br><span class=\"line\">    <span class=\"comment\"># 如果session_key和当前session不同，则进行判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> s_key <span class=\"keyword\">and</span> s_key.group(<span class=\"number\">1</span>) != session_key:</span><br><span class=\"line\">        cache_session_dict = cache.get(key)</span><br><span class=\"line\">        <span class=\"comment\"># 如果session信息中保存的user_id和当前用户id相同，则表明该账号已登录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cache_session_dict.get(<span class=\"string\">'user_id'</span>) == user.id:</span><br><span class=\"line\">            cache.delete(key)</span><br><span class=\"line\">            logger.info(<span class=\"string\">'Account [&#123;&#125;] has logged in elsewhere, delete old session [&#123;&#125;]'</span>.format(username, key))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视图装饰器\"><a href=\"#视图装饰器\" class=\"headerlink\" title=\"视图装饰器\"></a>视图装饰器</h2><p>为了实现登录状态的判断，可以在Django视图上加上装饰器，从而判断每次request对应的session是否被删除，同时进行其他权限校验。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">auth_required</span><span class=\"params\">(perm)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(view_func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_wrapped_view</span><span class=\"params\">(request, *args, **kwargs)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                session_key = request.session.session_key</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># session_flag = Session.objects.filter(session_key=session_key)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> session_key:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4001</span>&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    role = request.session.get(<span class=\"string\">\"role_id\"</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> role:</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4002</span>&#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> int(role) &gt; int(perm):</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4003</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                logger.error(e)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> JsonResponse(&#123;<span class=\"string\">\"respCode\"</span>: <span class=\"number\">4004</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> view_func(request, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _wrapped_view</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>"},{"title":"Django实现语言切换","date":"2018-01-08T10:38:49.000Z","_content":"\nDjango提供了实现多语言切换的中间件，可以实现模板（templates）、视图（views）以及JavaScript中语言的切换。基本的模式是在代码中对需要切换的内容加上标签，然后在翻译文件中填充翻译过后的字符串，最后编译即可。本文以中英文切换为例，介绍如果在Django中实现语言的切换。参考文档：[https://djangobook-cn.readthedocs.io/en/latest/chapter19.html](https://djangobook-cn.readthedocs.io/en/latest/chapter19.html)\n\n<!--more-->\n\n## 配置\n\n- 首先在Django settings文件中加入中间件`django.middleware.locale.LocaleMiddleware`\n```python\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    # django语言国际化中间件\n    'django.middleware.locale.LocaleMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n```\n\n- 然后增加`LANGUAGES`和`LOCALE_PATHS`配置，`locale`文件夹需要手动创建：\n```python\nLANGUAGES = (\n    ('zh-hans', '中文简体'),\n    ('en', 'English'),\n)\n\nLOCALE_PATHS = (\n    os.path.join(os.path.dirname(BASE_DIR), 'locale'),\n)\n```\n\n## 修改html模板文件\n\n- 首先需要在每个html第一行加入以下代码，可以将它放在公共页面\n```python\n{% load i18n %}\n```\n- 在需要翻译的字符串上加上trans标签,例如：\n```python\n<li><a href=\"/management/language_set\"><i class=\"ti-settings\"></i> {% trans '语言设置' %}</a></li>\n```\n\n- 多次重复翻译的内容可以设置成常量：\n```python\n{% trans \"This is the title\" as the_title %}\n<title>{{ the_title }}</title>\n<meta name=\"description\" content=\"{{ the_title }}\">\n```\n\n- 如果翻译的内容有django模板输出的变量，就需要用blocktrans和endblocktrans，例如：\n```html\n{% blocktrans %}This string will have {{ value }} inside.{% endblocktrans %}\n```\n\n## 后端视图\n\n- 如果Django后端视图中有返回中文字符串也需要切换成英文，可以利用django的`gettext`模块，代码示例如下：\n```python\nfrom django.utils.translation import gettext as _\n\ndef test_views(request):\n    response_str = _(\"中文字符串\")\n    return HttpResponse(response_str)\n    \n```\n\n- 需要注意，Django渲染模板时需要使用`render`而不是`render_to_response`\n\n## JavaScript中的语言转换\n\n- 首先在根`urls.py`文件中的`urlpatterns`列表中添加如下代码：\n```python\nurl(r'^jsi18n/$', JavaScriptCatalog.as_view(packages=['ProjectName']), name='javascript-catalog')\n```\n\n- 然后在模板中引入js(可放在公共页面)\n```python\n<script type=\"text/javascript\" src=\"{% url 'javascript-catalog' %}\"></script>\n```\n\n- 使用`gettext`在js中标记字符串，例如：\n```javascript\nfunction editpwd(){\n        layer.open({\n          type: 1,\n          title: gettext('修改密码'),\n          maxmin: true,\n          shadeClose: true, //点击遮罩关闭层\n          area : ['550px' , ''],\n          content:$('#addsort_style'),\n       })\n    }\n```\n\n- 需要注意，必须将JavaScript代码单独放在.js文件中，不能写在html代码后面，否则后面生成翻译文件时检测不到\n\n## 翻译文件生成与编译\n\n- 添加完翻译的标记后，执行以下命令即可在`locale`文件夹下生成翻译文件：\n\n`python manage.py makemessages -l en`\n`python manage.py makemessages -d djangojs -l en`\n\n- 执行成功后可以发现生成了`django.po`以及`djangojs.po`文件，然后就可以填充翻译后的字符串：\n```python\n#: DrBrain3/templates/Management/series_list.html:46\n#: DrBrain3/templates/Users/new_psw.html:89\nmsgid \"确认修改\"\nmsgstr \"Confirm the changes\"\n```\n需要注意，有时由于识别的错乱，执行`python manage.py makemessages -l en`后.po文件中会出现fuzzy的字眼，此时需要将.po文件中这些出现错乱的都删除，正确的翻译文件如上图所示\n\n- 填充完所有翻译后的字符串，就可以执行编译命令生成.mo文件\n\n`python manage.py compilemessages`\n\n## 如何切换语言\nDjango本身提供了语言切换的功能，可参考如下方法实现：\n\n- 在项目根路由文件`urls.py`中添加切换语言的url\n```python\nurl(r'^i18n/',include('django.conf.urls.i18n'))\n```\n\n- html页面中添加如下form表单\n```python\n<form action=\"{% url 'set_language' %}\" method=\"post\" id=\"change_language_form\" enctype=\"multipart/form-data\">\n\t{% csrf_token %}\n    <input type=\"hidden\" name=\"next\" value=\"\"/>\n\t<select class=\"change_language\" name=\"language\" id=\"language\" onclick=\"changeLan()\">\n\t\t{% for lang in LANGUAGES %}\n        \t<option value=\"{{ lang.0 }}\"{% ifequal lang.0 LANGUAGE_CODE %} selected {% endifequal %}>{{ lang.1 }}</option>\n\t\t{% endfor %}\n\t</select>\n</form>\n```\n\n- JavaScript代码\n```javascript\n$('.change_language').change(function (e) {\n    e.preventDefault();\n    $('#change_language_form').submit();\n    return false\n\n});\n```\n\n- 登录时记录用户选择的语言\n\n在用户登录的后端视图中加入：\n```python\nrequest.session['_language']='zh-hans'\n```\n\n","source":"_posts/Django实现语言切换.md","raw":"---\ntitle: Django实现语言切换\ndate: 2018-01-08 18:38:49\ntags: Django\ncategories: Django\n---\n\nDjango提供了实现多语言切换的中间件，可以实现模板（templates）、视图（views）以及JavaScript中语言的切换。基本的模式是在代码中对需要切换的内容加上标签，然后在翻译文件中填充翻译过后的字符串，最后编译即可。本文以中英文切换为例，介绍如果在Django中实现语言的切换。参考文档：[https://djangobook-cn.readthedocs.io/en/latest/chapter19.html](https://djangobook-cn.readthedocs.io/en/latest/chapter19.html)\n\n<!--more-->\n\n## 配置\n\n- 首先在Django settings文件中加入中间件`django.middleware.locale.LocaleMiddleware`\n```python\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    # django语言国际化中间件\n    'django.middleware.locale.LocaleMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n```\n\n- 然后增加`LANGUAGES`和`LOCALE_PATHS`配置，`locale`文件夹需要手动创建：\n```python\nLANGUAGES = (\n    ('zh-hans', '中文简体'),\n    ('en', 'English'),\n)\n\nLOCALE_PATHS = (\n    os.path.join(os.path.dirname(BASE_DIR), 'locale'),\n)\n```\n\n## 修改html模板文件\n\n- 首先需要在每个html第一行加入以下代码，可以将它放在公共页面\n```python\n{% load i18n %}\n```\n- 在需要翻译的字符串上加上trans标签,例如：\n```python\n<li><a href=\"/management/language_set\"><i class=\"ti-settings\"></i> {% trans '语言设置' %}</a></li>\n```\n\n- 多次重复翻译的内容可以设置成常量：\n```python\n{% trans \"This is the title\" as the_title %}\n<title>{{ the_title }}</title>\n<meta name=\"description\" content=\"{{ the_title }}\">\n```\n\n- 如果翻译的内容有django模板输出的变量，就需要用blocktrans和endblocktrans，例如：\n```html\n{% blocktrans %}This string will have {{ value }} inside.{% endblocktrans %}\n```\n\n## 后端视图\n\n- 如果Django后端视图中有返回中文字符串也需要切换成英文，可以利用django的`gettext`模块，代码示例如下：\n```python\nfrom django.utils.translation import gettext as _\n\ndef test_views(request):\n    response_str = _(\"中文字符串\")\n    return HttpResponse(response_str)\n    \n```\n\n- 需要注意，Django渲染模板时需要使用`render`而不是`render_to_response`\n\n## JavaScript中的语言转换\n\n- 首先在根`urls.py`文件中的`urlpatterns`列表中添加如下代码：\n```python\nurl(r'^jsi18n/$', JavaScriptCatalog.as_view(packages=['ProjectName']), name='javascript-catalog')\n```\n\n- 然后在模板中引入js(可放在公共页面)\n```python\n<script type=\"text/javascript\" src=\"{% url 'javascript-catalog' %}\"></script>\n```\n\n- 使用`gettext`在js中标记字符串，例如：\n```javascript\nfunction editpwd(){\n        layer.open({\n          type: 1,\n          title: gettext('修改密码'),\n          maxmin: true,\n          shadeClose: true, //点击遮罩关闭层\n          area : ['550px' , ''],\n          content:$('#addsort_style'),\n       })\n    }\n```\n\n- 需要注意，必须将JavaScript代码单独放在.js文件中，不能写在html代码后面，否则后面生成翻译文件时检测不到\n\n## 翻译文件生成与编译\n\n- 添加完翻译的标记后，执行以下命令即可在`locale`文件夹下生成翻译文件：\n\n`python manage.py makemessages -l en`\n`python manage.py makemessages -d djangojs -l en`\n\n- 执行成功后可以发现生成了`django.po`以及`djangojs.po`文件，然后就可以填充翻译后的字符串：\n```python\n#: DrBrain3/templates/Management/series_list.html:46\n#: DrBrain3/templates/Users/new_psw.html:89\nmsgid \"确认修改\"\nmsgstr \"Confirm the changes\"\n```\n需要注意，有时由于识别的错乱，执行`python manage.py makemessages -l en`后.po文件中会出现fuzzy的字眼，此时需要将.po文件中这些出现错乱的都删除，正确的翻译文件如上图所示\n\n- 填充完所有翻译后的字符串，就可以执行编译命令生成.mo文件\n\n`python manage.py compilemessages`\n\n## 如何切换语言\nDjango本身提供了语言切换的功能，可参考如下方法实现：\n\n- 在项目根路由文件`urls.py`中添加切换语言的url\n```python\nurl(r'^i18n/',include('django.conf.urls.i18n'))\n```\n\n- html页面中添加如下form表单\n```python\n<form action=\"{% url 'set_language' %}\" method=\"post\" id=\"change_language_form\" enctype=\"multipart/form-data\">\n\t{% csrf_token %}\n    <input type=\"hidden\" name=\"next\" value=\"\"/>\n\t<select class=\"change_language\" name=\"language\" id=\"language\" onclick=\"changeLan()\">\n\t\t{% for lang in LANGUAGES %}\n        \t<option value=\"{{ lang.0 }}\"{% ifequal lang.0 LANGUAGE_CODE %} selected {% endifequal %}>{{ lang.1 }}</option>\n\t\t{% endfor %}\n\t</select>\n</form>\n```\n\n- JavaScript代码\n```javascript\n$('.change_language').change(function (e) {\n    e.preventDefault();\n    $('#change_language_form').submit();\n    return false\n\n});\n```\n\n- 登录时记录用户选择的语言\n\n在用户登录的后端视图中加入：\n```python\nrequest.session['_language']='zh-hans'\n```\n\n","slug":"Django实现语言切换","published":1,"updated":"2020-01-09T04:18:51.556Z","_id":"ck555p5050006osabgnw33pcf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Django提供了实现多语言切换的中间件，可以实现模板（templates）、视图（views）以及JavaScript中语言的切换。基本的模式是在代码中对需要切换的内容加上标签，然后在翻译文件中填充翻译过后的字符串，最后编译即可。本文以中英文切换为例，介绍如果在Django中实现语言的切换。参考文档：<a href=\"https://djangobook-cn.readthedocs.io/en/latest/chapter19.html\" target=\"_blank\" rel=\"noopener\">https://djangobook-cn.readthedocs.io/en/latest/chapter19.html</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li><p>首先在Django settings文件中加入中间件<code>django.middleware.locale.LocaleMiddleware</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE = [</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># django语言国际化中间件</span></span><br><span class=\"line\">    <span class=\"string\">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后增加<code>LANGUAGES</code>和<code>LOCALE_PATHS</code>配置，<code>locale</code>文件夹需要手动创建：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGES = (</span><br><span class=\"line\">    (<span class=\"string\">'zh-hans'</span>, <span class=\"string\">'中文简体'</span>),</span><br><span class=\"line\">    (<span class=\"string\">'en'</span>, <span class=\"string\">'English'</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">LOCALE_PATHS = (</span><br><span class=\"line\">    os.path.join(os.path.dirname(BASE_DIR), <span class=\"string\">'locale'</span>),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"修改html模板文件\"><a href=\"#修改html模板文件\" class=\"headerlink\" title=\"修改html模板文件\"></a>修改html模板文件</h2><ul>\n<li><p>首先需要在每个html第一行加入以下代码，可以将它放在公共页面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load i18n %&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在需要翻译的字符串上加上trans标签,例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;&lt;a href=\"/management/language_set\"&gt;&lt;i class=\"ti-settings\"&gt;&lt;/i&gt; &#123;% trans '语言设置' %&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多次重复翻译的内容可以设置成常量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% trans <span class=\"string\">\"This is the title\"</span> <span class=\"keyword\">as</span> the_title %&#125;</span><br><span class=\"line\">&lt;title&gt;&#123;&#123; the_title &#125;&#125;&lt;/title&gt;</span><br><span class=\"line\">&lt;meta name=<span class=\"string\">\"description\"</span> content=<span class=\"string\">\"&#123;&#123; the_title &#125;&#125;\"</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果翻译的内容有django模板输出的变量，就需要用blocktrans和endblocktrans，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blocktrans %&#125;This string will have &#123;&#123; value &#125;&#125; inside.&#123;% endblocktrans %&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"后端视图\"><a href=\"#后端视图\" class=\"headerlink\" title=\"后端视图\"></a>后端视图</h2><ul>\n<li><p>如果Django后端视图中有返回中文字符串也需要切换成英文，可以利用django的<code>gettext</code>模块，代码示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> gettext <span class=\"keyword\">as</span> _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_views</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    response_str = _(<span class=\"string\">\"中文字符串\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(response_str)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要注意，Django渲染模板时需要使用<code>render</code>而不是<code>render_to_response</code></p>\n</li>\n</ul>\n<h2 id=\"JavaScript中的语言转换\"><a href=\"#JavaScript中的语言转换\" class=\"headerlink\" title=\"JavaScript中的语言转换\"></a>JavaScript中的语言转换</h2><ul>\n<li><p>首先在根<code>urls.py</code>文件中的<code>urlpatterns</code>列表中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^jsi18n/$'</span>, JavaScriptCatalog.as_view(packages=[<span class=\"string\">'ProjectName'</span>]), name=<span class=\"string\">'javascript-catalog'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在模板中引入js(可放在公共页面)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=\"text/javascript\" src=\"&#123;% url 'javascript-catalog' %&#125;\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>gettext</code>在js中标记字符串，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">editpwd</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        layer.open(&#123;</span><br><span class=\"line\">          type: <span class=\"number\">1</span>,</span><br><span class=\"line\">          title: gettext(<span class=\"string\">'修改密码'</span>),</span><br><span class=\"line\">          maxmin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          shadeClose: <span class=\"literal\">true</span>, <span class=\"comment\">//点击遮罩关闭层</span></span><br><span class=\"line\">          area : [<span class=\"string\">'550px'</span> , <span class=\"string\">''</span>],</span><br><span class=\"line\">          content:$(<span class=\"string\">'#addsort_style'</span>),</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要注意，必须将JavaScript代码单独放在.js文件中，不能写在html代码后面，否则后面生成翻译文件时检测不到</p>\n</li>\n</ul>\n<h2 id=\"翻译文件生成与编译\"><a href=\"#翻译文件生成与编译\" class=\"headerlink\" title=\"翻译文件生成与编译\"></a>翻译文件生成与编译</h2><ul>\n<li>添加完翻译的标记后，执行以下命令即可在<code>locale</code>文件夹下生成翻译文件：</li>\n</ul>\n<p><code>python manage.py makemessages -l en</code><br><code>python manage.py makemessages -d djangojs -l en</code></p>\n<ul>\n<li><p>执行成功后可以发现生成了<code>django.po</code>以及<code>djangojs.po</code>文件，然后就可以填充翻译后的字符串：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#: DrBrain3/templates/Management/series_list.html:46</span></span><br><span class=\"line\"><span class=\"comment\">#: DrBrain3/templates/Users/new_psw.html:89</span></span><br><span class=\"line\">msgid <span class=\"string\">\"确认修改\"</span></span><br><span class=\"line\">msgstr <span class=\"string\">\"Confirm the changes\"</span></span><br></pre></td></tr></table></figure>\n<p>需要注意，有时由于识别的错乱，执行<code>python manage.py makemessages -l en</code>后.po文件中会出现fuzzy的字眼，此时需要将.po文件中这些出现错乱的都删除，正确的翻译文件如上图所示</p>\n</li>\n<li><p>填充完所有翻译后的字符串，就可以执行编译命令生成.mo文件</p>\n</li>\n</ul>\n<p><code>python manage.py compilemessages</code></p>\n<h2 id=\"如何切换语言\"><a href=\"#如何切换语言\" class=\"headerlink\" title=\"如何切换语言\"></a>如何切换语言</h2><p>Django本身提供了语言切换的功能，可参考如下方法实现：</p>\n<ul>\n<li><p>在项目根路由文件<code>urls.py</code>中添加切换语言的url</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^i18n/'</span>,include(<span class=\"string\">'django.conf.urls.i18n'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>html页面中添加如下form表单</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"&#123;% url 'set_language' %&#125;\"</span> method=<span class=\"string\">\"post\"</span> id=<span class=\"string\">\"change_language_form\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span><br><span class=\"line\">\t&#123;% csrf_token %&#125;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"hidden\"</span> name=<span class=\"string\">\"next\"</span> value=<span class=\"string\">\"\"</span>/&gt;</span><br><span class=\"line\">\t&lt;select class=\"change_language\" name=\"language\" id=\"language\" onclick=\"changeLan()\"&gt;</span><br><span class=\"line\">\t\t&#123;% <span class=\"keyword\">for</span> lang <span class=\"keyword\">in</span> LANGUAGES %&#125;</span><br><span class=\"line\">        \t&lt;option value=\"&#123;&#123; lang.0 &#125;&#125;\"&#123;% ifequal lang.0 LANGUAGE_CODE %&#125; selected &#123;% endifequal %&#125;&gt;&#123;&#123; lang.1 &#125;&#125;&lt;/option&gt;</span><br><span class=\"line\">\t\t&#123;% endfor %&#125;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JavaScript代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.change_language'</span>).change(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    $(<span class=\"string\">'#change_language_form'</span>).submit();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录时记录用户选择的语言</p>\n</li>\n</ul>\n<p>在用户登录的后端视图中加入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session[<span class=\"string\">'_language'</span>]=<span class=\"string\">'zh-hans'</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Django提供了实现多语言切换的中间件，可以实现模板（templates）、视图（views）以及JavaScript中语言的切换。基本的模式是在代码中对需要切换的内容加上标签，然后在翻译文件中填充翻译过后的字符串，最后编译即可。本文以中英文切换为例，介绍如果在Django中实现语言的切换。参考文档：<a href=\"https://djangobook-cn.readthedocs.io/en/latest/chapter19.html\" target=\"_blank\" rel=\"noopener\">https://djangobook-cn.readthedocs.io/en/latest/chapter19.html</a></p>","more":"<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li><p>首先在Django settings文件中加入中间件<code>django.middleware.locale.LocaleMiddleware</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE = [</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># django语言国际化中间件</span></span><br><span class=\"line\">    <span class=\"string\">'django.middleware.locale.LocaleMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后增加<code>LANGUAGES</code>和<code>LOCALE_PATHS</code>配置，<code>locale</code>文件夹需要手动创建：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGES = (</span><br><span class=\"line\">    (<span class=\"string\">'zh-hans'</span>, <span class=\"string\">'中文简体'</span>),</span><br><span class=\"line\">    (<span class=\"string\">'en'</span>, <span class=\"string\">'English'</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">LOCALE_PATHS = (</span><br><span class=\"line\">    os.path.join(os.path.dirname(BASE_DIR), <span class=\"string\">'locale'</span>),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"修改html模板文件\"><a href=\"#修改html模板文件\" class=\"headerlink\" title=\"修改html模板文件\"></a>修改html模板文件</h2><ul>\n<li><p>首先需要在每个html第一行加入以下代码，可以将它放在公共页面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load i18n %&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>在需要翻译的字符串上加上trans标签,例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;&lt;a href=\"/management/language_set\"&gt;&lt;i class=\"ti-settings\"&gt;&lt;/i&gt; &#123;% trans '语言设置' %&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多次重复翻译的内容可以设置成常量：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% trans <span class=\"string\">\"This is the title\"</span> <span class=\"keyword\">as</span> the_title %&#125;</span><br><span class=\"line\">&lt;title&gt;&#123;&#123; the_title &#125;&#125;&lt;/title&gt;</span><br><span class=\"line\">&lt;meta name=<span class=\"string\">\"description\"</span> content=<span class=\"string\">\"&#123;&#123; the_title &#125;&#125;\"</span>&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果翻译的内容有django模板输出的变量，就需要用blocktrans和endblocktrans，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% blocktrans %&#125;This string will have &#123;&#123; value &#125;&#125; inside.&#123;% endblocktrans %&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"后端视图\"><a href=\"#后端视图\" class=\"headerlink\" title=\"后端视图\"></a>后端视图</h2><ul>\n<li><p>如果Django后端视图中有返回中文字符串也需要切换成英文，可以利用django的<code>gettext</code>模块，代码示例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.utils.translation <span class=\"keyword\">import</span> gettext <span class=\"keyword\">as</span> _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_views</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    response_str = _(<span class=\"string\">\"中文字符串\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(response_str)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要注意，Django渲染模板时需要使用<code>render</code>而不是<code>render_to_response</code></p>\n</li>\n</ul>\n<h2 id=\"JavaScript中的语言转换\"><a href=\"#JavaScript中的语言转换\" class=\"headerlink\" title=\"JavaScript中的语言转换\"></a>JavaScript中的语言转换</h2><ul>\n<li><p>首先在根<code>urls.py</code>文件中的<code>urlpatterns</code>列表中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^jsi18n/$'</span>, JavaScriptCatalog.as_view(packages=[<span class=\"string\">'ProjectName'</span>]), name=<span class=\"string\">'javascript-catalog'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后在模板中引入js(可放在公共页面)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=\"text/javascript\" src=\"&#123;% url 'javascript-catalog' %&#125;\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>gettext</code>在js中标记字符串，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">editpwd</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        layer.open(&#123;</span><br><span class=\"line\">          type: <span class=\"number\">1</span>,</span><br><span class=\"line\">          title: gettext(<span class=\"string\">'修改密码'</span>),</span><br><span class=\"line\">          maxmin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          shadeClose: <span class=\"literal\">true</span>, <span class=\"comment\">//点击遮罩关闭层</span></span><br><span class=\"line\">          area : [<span class=\"string\">'550px'</span> , <span class=\"string\">''</span>],</span><br><span class=\"line\">          content:$(<span class=\"string\">'#addsort_style'</span>),</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>需要注意，必须将JavaScript代码单独放在.js文件中，不能写在html代码后面，否则后面生成翻译文件时检测不到</p>\n</li>\n</ul>\n<h2 id=\"翻译文件生成与编译\"><a href=\"#翻译文件生成与编译\" class=\"headerlink\" title=\"翻译文件生成与编译\"></a>翻译文件生成与编译</h2><ul>\n<li>添加完翻译的标记后，执行以下命令即可在<code>locale</code>文件夹下生成翻译文件：</li>\n</ul>\n<p><code>python manage.py makemessages -l en</code><br><code>python manage.py makemessages -d djangojs -l en</code></p>\n<ul>\n<li><p>执行成功后可以发现生成了<code>django.po</code>以及<code>djangojs.po</code>文件，然后就可以填充翻译后的字符串：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#: DrBrain3/templates/Management/series_list.html:46</span></span><br><span class=\"line\"><span class=\"comment\">#: DrBrain3/templates/Users/new_psw.html:89</span></span><br><span class=\"line\">msgid <span class=\"string\">\"确认修改\"</span></span><br><span class=\"line\">msgstr <span class=\"string\">\"Confirm the changes\"</span></span><br></pre></td></tr></table></figure>\n<p>需要注意，有时由于识别的错乱，执行<code>python manage.py makemessages -l en</code>后.po文件中会出现fuzzy的字眼，此时需要将.po文件中这些出现错乱的都删除，正确的翻译文件如上图所示</p>\n</li>\n<li><p>填充完所有翻译后的字符串，就可以执行编译命令生成.mo文件</p>\n</li>\n</ul>\n<p><code>python manage.py compilemessages</code></p>\n<h2 id=\"如何切换语言\"><a href=\"#如何切换语言\" class=\"headerlink\" title=\"如何切换语言\"></a>如何切换语言</h2><p>Django本身提供了语言切换的功能，可参考如下方法实现：</p>\n<ul>\n<li><p>在项目根路由文件<code>urls.py</code>中添加切换语言的url</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^i18n/'</span>,include(<span class=\"string\">'django.conf.urls.i18n'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>html页面中添加如下form表单</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"&#123;% url 'set_language' %&#125;\"</span> method=<span class=\"string\">\"post\"</span> id=<span class=\"string\">\"change_language_form\"</span> enctype=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span><br><span class=\"line\">\t&#123;% csrf_token %&#125;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"hidden\"</span> name=<span class=\"string\">\"next\"</span> value=<span class=\"string\">\"\"</span>/&gt;</span><br><span class=\"line\">\t&lt;select class=\"change_language\" name=\"language\" id=\"language\" onclick=\"changeLan()\"&gt;</span><br><span class=\"line\">\t\t&#123;% <span class=\"keyword\">for</span> lang <span class=\"keyword\">in</span> LANGUAGES %&#125;</span><br><span class=\"line\">        \t&lt;option value=\"&#123;&#123; lang.0 &#125;&#125;\"&#123;% ifequal lang.0 LANGUAGE_CODE %&#125; selected &#123;% endifequal %&#125;&gt;&#123;&#123; lang.1 &#125;&#125;&lt;/option&gt;</span><br><span class=\"line\">\t\t&#123;% endfor %&#125;</span><br><span class=\"line\">\t&lt;/select&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>JavaScript代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.change_language'</span>).change(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    $(<span class=\"string\">'#change_language_form'</span>).submit();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录时记录用户选择的语言</p>\n</li>\n</ul>\n<p>在用户登录的后端视图中加入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.session[<span class=\"string\">'_language'</span>]=<span class=\"string\">'zh-hans'</span></span><br></pre></td></tr></table></figure>"},{"title":"Docker部署Nginx + uWSGI + Django实践","date":"2019-12-10T12:29:49.000Z","_content":"\n## 简介\nDocker容器技术是目前热门的代码部署手段，通过将代码、配置文件、开发环境等打包到一个容器中，就能将其快速部署到生产环境，十分方便快捷。本文将介绍如何使用Docker来部署一套Nginx + uWSGI + Django的生产环境web服务器（Centos7系统）.\n\n<!--more-->\n\n阅读前需要对一些基本技术有所了解，以下仅供参考：\n\nDocker:  [https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html](https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html)\n [https://zhuanlan.zhihu.com/p/23599229](https://zhuanlan.zhihu.com/p/23599229)\nNginx、uWSGI：[https://blog.csdn.net/weixin_40907382/article/details/80824167](https://blog.csdn.net/weixin_40907382/article/details/80824167)\n\n## Docker安装\n\n```shell\n# 查看centos系统版本，内核版本要求不低于3.10\nuname -r\n\n# 更新yum\nsudo yum -y update\n\n# 安装需要的软件包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 设置yum源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# 查看仓库中所有docker版本\nyum list docker-ce --showduplicates | sort -r\n\n# 选择其中一个版本安装\nyum -y install docker-ce-18.06.3.ce\n\n# 启动Docker服务，并设置为开机启动\nsystemctl start docker\nsystemctl enable docker\n\n# 测试是否安装成功\ndocker version\n\n# 安装docker-compose工具（用于容器编排）\nsudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n```\n\n## 镜像准备\nNginx：可直接从docker hub中拉取，执行`docker pull nginx`\nPython：构建uWSGI容器可以基于centos、ubuntu等进行，但为了更轻量化，也可以使用python镜像，同样从docker hub中拉取所需python版本的镜像，例如：`docker pull python:3.6.8`\n\n接下来，需要基于python镜像制作一个uWSGI服务器镜像。简单的方法是基于python镜像启动一个容器，然后进行python依赖包以及其他环境的安装，随后使用`docker commit`打包为镜像，但这样做有一些坏处：\n在容器内安装一些依赖、环境时，会有大量无关内容被添加，并且由于镜像的分层存储，修改容器仅仅是在当前层进行标记、添加、修改，并不会改变上一层，因此使用`docker commit`制作镜像，会导致镜像越来越臃肿；其次，由于使用`docker commit`制作的镜像对于其他人来说是黑箱操作，后续进行维护的人无法得知镜像是如何构建的，增加了维护风险和难度。\n因此，我们使用Dockerfile来构建uWSGI容器，关于Dockerfile的编写本文不再赘述，请参考：[https://yeasy.gitbooks.io/docker_practice/content/image/build.html](https://yeasy.gitbooks.io/docker_practice/content/image/build.html)，一个简单的Dockerfile如下：\n```shell\n# 基于python3.6.8镜像\nFROM python:3.6.8\n\n# 复制Django项目所需的依赖文件清单到容器中\nCOPY requirements.txt /\n\n# 安装依赖\nRUN pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple -r /requirements.txt\n\n# 创建uwsgi软链接\nRUN ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi\n```\n\n## 创建容器\n镜像制作完成，就可以开始创建容器了，可以直接使用`docker run`命令来创建，也可以使用`docker-compose`工具，下面首先介绍`docker run`的方式：\n\nNginx: \n```shell\ndocker run -it --name nginx_container --privileged=true -p 443:443 -p 8080:8080 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /nginx.conf:/etc/nginx/nginx.conf --net staticnet --ip 192.168.0.2 --restart=always -d nginx\n```\n\nuWSGI：\n```shell\ndocker run -it --name uwsgi_container --privileged=true -p 8090:8090 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages --net staticnet --ip 192.168.0.3 --restart=always -d uwsgi_image uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini\n```\n\n参数解释：\n`-it`：让Docker分配一个伪终端,并绑定到容器的标准输入上\n`--name`：指定容器的名称\n`--privileged`：让容器内的root用户拥有真正root权限\n`-p`：指定端口映射，将宿主机的端口映射到容器端口\n`-v`：指定文件挂载路径，将Django项目、nginx配置文件放在宿主机，然后挂载到容器\n  说明：uWSGI容器启动时，将宿主机中一个虚拟环境（安装有Django项目所需的python依赖）的依赖包存放路径挂载到容器中python3依赖包存放路径，这样做的初衷是方便后续有新的依赖包需要安装时，可以直接在宿主机下安装，而不需要进入容器。但在实际应用中发现，某些依赖包使用这样方式安装后不会产生软链接，容器内无法使用，因此实际在制作uWSGI镜像时已经进行了依赖安装。后续将会尝试同时挂载python的site-packages目录和bin目录，也许可以解决这个问题。\n`--net`：指定容器所在的网段（需要提前创建一个网段）\n`--ip`：指定容器的ip。如果不特别指定，容器默认使用172.17.0.x的ip，并且会根据启动顺序变动\n`--restart`：在容器退出时总是重启容器，保证容器始终运行\n`-d`：让容器在后台运行\n\n## 使用docker-compose工具\n使用`docker run`命令可以创建并启动容器，但需要一个个容器地启动，这里推荐使用docker-compose工具来进行容器编排和启动。只需要编写一个`docker_compose.yaml`文件，然后通过`docker-compose up -d .`命令就可以一次性编排、启动多个容器。以下是docker_compose.yaml文件示例：\n\n```shell\nversion: \"3\"\nservices: \n    nginx: \n    \t\t# 指定镜像\n        image: nginx\n        \n        # 指定容器名称\n        container_name: nginx_container\n        \n        # 端口映射\n        ports: \n            - 8080:8080\n            \n        # 文件挂载路径\n        volumes: \n            - /DJANGO_PROJECT:/DJANGO_PROJECT\n            - /nginx.conf:/etc/nginx/nginx.conf\n            \n        # 网络和ip\n        networks: \n            extnetwork: \n                ipv4_address: 192.168.0.2\n                \n        # 启动后指定的命令\n        command: nginx -g 'daemon off;'\n        \n        privileged: true\n        restart: always\n    \n    uwsgi:\n        container_name: uwsgi_container\n        ports: \n            - 8090:8090\n        volumes:\n            - /DJANGO_PROJECT:/DJANGO_PROJECT\n            - /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages\n        networks:\n            extnetwork: \n                ipv4_address: 192.168.0.3\n        privileged: true\n        command: uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini\n        restart: always        \n\nnetworks: \n    extnetwork: \n        ipam: \n            config: \n            - subnet: 192.168.0.0/16\n\n\n\n```\n\n注意：Nginx容器的启动命令是`nginx -g 'daemon off;'`，这是因为容器启动后执行nginx启动命令开启的nginx进程是第一个进程(pid=1)，而Docker容器将pid=1的进程是否存在作为容器是否正在运行的依据，nginx默认以daemon方式运行，执行完启动命令就在后台运行，此时Docker判断pid=1的进程终止，容器就会退出（如果设置了restart=always参数，则容器会一直重启），因此需要加上`daemon off`参数。\n\n## 总结\n以上使用Docker技术部署一套Nginx + uWSGI + Django的web服务器，是使用Docker技术的一次尝试，主要是利用了Docker文件挂载的这一方式来实现，在实际使用过程中，也发现一些小问题需要优化，欢迎大家有更好的想法和我交流。\n","source":"_posts/Docker部署Nginx + uWSGI + Django实践.md","raw":"---\ntitle: Docker部署Nginx + uWSGI + Django实践\ndate: 2019-12-10 20:29:49\ntags: [Docker,Django,Nginx]\ncategories: Docker\n---\n\n## 简介\nDocker容器技术是目前热门的代码部署手段，通过将代码、配置文件、开发环境等打包到一个容器中，就能将其快速部署到生产环境，十分方便快捷。本文将介绍如何使用Docker来部署一套Nginx + uWSGI + Django的生产环境web服务器（Centos7系统）.\n\n<!--more-->\n\n阅读前需要对一些基本技术有所了解，以下仅供参考：\n\nDocker:  [https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html](https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html)\n [https://zhuanlan.zhihu.com/p/23599229](https://zhuanlan.zhihu.com/p/23599229)\nNginx、uWSGI：[https://blog.csdn.net/weixin_40907382/article/details/80824167](https://blog.csdn.net/weixin_40907382/article/details/80824167)\n\n## Docker安装\n\n```shell\n# 查看centos系统版本，内核版本要求不低于3.10\nuname -r\n\n# 更新yum\nsudo yum -y update\n\n# 安装需要的软件包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 设置yum源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# 查看仓库中所有docker版本\nyum list docker-ce --showduplicates | sort -r\n\n# 选择其中一个版本安装\nyum -y install docker-ce-18.06.3.ce\n\n# 启动Docker服务，并设置为开机启动\nsystemctl start docker\nsystemctl enable docker\n\n# 测试是否安装成功\ndocker version\n\n# 安装docker-compose工具（用于容器编排）\nsudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\nln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n\n```\n\n## 镜像准备\nNginx：可直接从docker hub中拉取，执行`docker pull nginx`\nPython：构建uWSGI容器可以基于centos、ubuntu等进行，但为了更轻量化，也可以使用python镜像，同样从docker hub中拉取所需python版本的镜像，例如：`docker pull python:3.6.8`\n\n接下来，需要基于python镜像制作一个uWSGI服务器镜像。简单的方法是基于python镜像启动一个容器，然后进行python依赖包以及其他环境的安装，随后使用`docker commit`打包为镜像，但这样做有一些坏处：\n在容器内安装一些依赖、环境时，会有大量无关内容被添加，并且由于镜像的分层存储，修改容器仅仅是在当前层进行标记、添加、修改，并不会改变上一层，因此使用`docker commit`制作镜像，会导致镜像越来越臃肿；其次，由于使用`docker commit`制作的镜像对于其他人来说是黑箱操作，后续进行维护的人无法得知镜像是如何构建的，增加了维护风险和难度。\n因此，我们使用Dockerfile来构建uWSGI容器，关于Dockerfile的编写本文不再赘述，请参考：[https://yeasy.gitbooks.io/docker_practice/content/image/build.html](https://yeasy.gitbooks.io/docker_practice/content/image/build.html)，一个简单的Dockerfile如下：\n```shell\n# 基于python3.6.8镜像\nFROM python:3.6.8\n\n# 复制Django项目所需的依赖文件清单到容器中\nCOPY requirements.txt /\n\n# 安装依赖\nRUN pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple -r /requirements.txt\n\n# 创建uwsgi软链接\nRUN ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi\n```\n\n## 创建容器\n镜像制作完成，就可以开始创建容器了，可以直接使用`docker run`命令来创建，也可以使用`docker-compose`工具，下面首先介绍`docker run`的方式：\n\nNginx: \n```shell\ndocker run -it --name nginx_container --privileged=true -p 443:443 -p 8080:8080 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /nginx.conf:/etc/nginx/nginx.conf --net staticnet --ip 192.168.0.2 --restart=always -d nginx\n```\n\nuWSGI：\n```shell\ndocker run -it --name uwsgi_container --privileged=true -p 8090:8090 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages --net staticnet --ip 192.168.0.3 --restart=always -d uwsgi_image uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini\n```\n\n参数解释：\n`-it`：让Docker分配一个伪终端,并绑定到容器的标准输入上\n`--name`：指定容器的名称\n`--privileged`：让容器内的root用户拥有真正root权限\n`-p`：指定端口映射，将宿主机的端口映射到容器端口\n`-v`：指定文件挂载路径，将Django项目、nginx配置文件放在宿主机，然后挂载到容器\n  说明：uWSGI容器启动时，将宿主机中一个虚拟环境（安装有Django项目所需的python依赖）的依赖包存放路径挂载到容器中python3依赖包存放路径，这样做的初衷是方便后续有新的依赖包需要安装时，可以直接在宿主机下安装，而不需要进入容器。但在实际应用中发现，某些依赖包使用这样方式安装后不会产生软链接，容器内无法使用，因此实际在制作uWSGI镜像时已经进行了依赖安装。后续将会尝试同时挂载python的site-packages目录和bin目录，也许可以解决这个问题。\n`--net`：指定容器所在的网段（需要提前创建一个网段）\n`--ip`：指定容器的ip。如果不特别指定，容器默认使用172.17.0.x的ip，并且会根据启动顺序变动\n`--restart`：在容器退出时总是重启容器，保证容器始终运行\n`-d`：让容器在后台运行\n\n## 使用docker-compose工具\n使用`docker run`命令可以创建并启动容器，但需要一个个容器地启动，这里推荐使用docker-compose工具来进行容器编排和启动。只需要编写一个`docker_compose.yaml`文件，然后通过`docker-compose up -d .`命令就可以一次性编排、启动多个容器。以下是docker_compose.yaml文件示例：\n\n```shell\nversion: \"3\"\nservices: \n    nginx: \n    \t\t# 指定镜像\n        image: nginx\n        \n        # 指定容器名称\n        container_name: nginx_container\n        \n        # 端口映射\n        ports: \n            - 8080:8080\n            \n        # 文件挂载路径\n        volumes: \n            - /DJANGO_PROJECT:/DJANGO_PROJECT\n            - /nginx.conf:/etc/nginx/nginx.conf\n            \n        # 网络和ip\n        networks: \n            extnetwork: \n                ipv4_address: 192.168.0.2\n                \n        # 启动后指定的命令\n        command: nginx -g 'daemon off;'\n        \n        privileged: true\n        restart: always\n    \n    uwsgi:\n        container_name: uwsgi_container\n        ports: \n            - 8090:8090\n        volumes:\n            - /DJANGO_PROJECT:/DJANGO_PROJECT\n            - /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages\n        networks:\n            extnetwork: \n                ipv4_address: 192.168.0.3\n        privileged: true\n        command: uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini\n        restart: always        \n\nnetworks: \n    extnetwork: \n        ipam: \n            config: \n            - subnet: 192.168.0.0/16\n\n\n\n```\n\n注意：Nginx容器的启动命令是`nginx -g 'daemon off;'`，这是因为容器启动后执行nginx启动命令开启的nginx进程是第一个进程(pid=1)，而Docker容器将pid=1的进程是否存在作为容器是否正在运行的依据，nginx默认以daemon方式运行，执行完启动命令就在后台运行，此时Docker判断pid=1的进程终止，容器就会退出（如果设置了restart=always参数，则容器会一直重启），因此需要加上`daemon off`参数。\n\n## 总结\n以上使用Docker技术部署一套Nginx + uWSGI + Django的web服务器，是使用Docker技术的一次尝试，主要是利用了Docker文件挂载的这一方式来实现，在实际使用过程中，也发现一些小问题需要优化，欢迎大家有更好的想法和我交流。\n","slug":"Docker部署Nginx + uWSGI + Django实践","published":1,"updated":"2020-01-09T04:22:58.473Z","_id":"ck555p5090008osab4x2ka43p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Docker容器技术是目前热门的代码部署手段，通过将代码、配置文件、开发环境等打包到一个容器中，就能将其快速部署到生产环境，十分方便快捷。本文将介绍如何使用Docker来部署一套Nginx + uWSGI + Django的生产环境web服务器（Centos7系统）.</p>\n<a id=\"more\"></a>\n\n<p>阅读前需要对一些基本技术有所了解，以下仅供参考：</p>\n<p>Docker:  <a href=\"https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html</a><br> <a href=\"https://zhuanlan.zhihu.com/p/23599229\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/23599229</a><br>Nginx、uWSGI：<a href=\"https://blog.csdn.net/weixin_40907382/article/details/80824167\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_40907382/article/details/80824167</a></p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看centos系统版本，内核版本要求不低于3.10</span></span><br><span class=\"line\">uname -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更新yum</span></span><br><span class=\"line\">sudo yum -y update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装需要的软件包</span></span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置yum源</span></span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看仓库中所有docker版本</span></span><br><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 选择其中一个版本安装</span></span><br><span class=\"line\">yum -y install docker-ce-18.06.3.ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Docker服务，并设置为开机启动</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试是否安装成功</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装docker-compose工具（用于容器编排）</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"镜像准备\"><a href=\"#镜像准备\" class=\"headerlink\" title=\"镜像准备\"></a>镜像准备</h2><p>Nginx：可直接从docker hub中拉取，执行<code>docker pull nginx</code><br>Python：构建uWSGI容器可以基于centos、ubuntu等进行，但为了更轻量化，也可以使用python镜像，同样从docker hub中拉取所需python版本的镜像，例如：<code>docker pull python:3.6.8</code></p>\n<p>接下来，需要基于python镜像制作一个uWSGI服务器镜像。简单的方法是基于python镜像启动一个容器，然后进行python依赖包以及其他环境的安装，随后使用<code>docker commit</code>打包为镜像，但这样做有一些坏处：<br>在容器内安装一些依赖、环境时，会有大量无关内容被添加，并且由于镜像的分层存储，修改容器仅仅是在当前层进行标记、添加、修改，并不会改变上一层，因此使用<code>docker commit</code>制作镜像，会导致镜像越来越臃肿；其次，由于使用<code>docker commit</code>制作的镜像对于其他人来说是黑箱操作，后续进行维护的人无法得知镜像是如何构建的，增加了维护风险和难度。<br>因此，我们使用Dockerfile来构建uWSGI容器，关于Dockerfile的编写本文不再赘述，请参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/content/image/build.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/content/image/build.html</a>，一个简单的Dockerfile如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于python3.6.8镜像</span></span><br><span class=\"line\">FROM python:3.6.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 复制Django项目所需的依赖文件清单到容器中</span></span><br><span class=\"line\">COPY requirements.txt /</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖</span></span><br><span class=\"line\">RUN pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple -r /requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建uwsgi软链接</span></span><br><span class=\"line\">RUN ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>镜像制作完成，就可以开始创建容器了，可以直接使用<code>docker run</code>命令来创建，也可以使用<code>docker-compose</code>工具，下面首先介绍<code>docker run</code>的方式：</p>\n<p>Nginx: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name nginx_container --privileged=true -p 443:443 -p 8080:8080 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /nginx.conf:/etc/nginx/nginx.conf --net staticnet --ip 192.168.0.2 --restart=always -d nginx</span><br></pre></td></tr></table></figure>\n\n<p>uWSGI：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name uwsgi_container --privileged=true -p 8090:8090 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages --net staticnet --ip 192.168.0.3 --restart=always -d uwsgi_image uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：<br><code>-it</code>：让Docker分配一个伪终端,并绑定到容器的标准输入上<br><code>--name</code>：指定容器的名称<br><code>--privileged</code>：让容器内的root用户拥有真正root权限<br><code>-p</code>：指定端口映射，将宿主机的端口映射到容器端口<br><code>-v</code>：指定文件挂载路径，将Django项目、nginx配置文件放在宿主机，然后挂载到容器<br>  说明：uWSGI容器启动时，将宿主机中一个虚拟环境（安装有Django项目所需的python依赖）的依赖包存放路径挂载到容器中python3依赖包存放路径，这样做的初衷是方便后续有新的依赖包需要安装时，可以直接在宿主机下安装，而不需要进入容器。但在实际应用中发现，某些依赖包使用这样方式安装后不会产生软链接，容器内无法使用，因此实际在制作uWSGI镜像时已经进行了依赖安装。后续将会尝试同时挂载python的site-packages目录和bin目录，也许可以解决这个问题。<br><code>--net</code>：指定容器所在的网段（需要提前创建一个网段）<br><code>--ip</code>：指定容器的ip。如果不特别指定，容器默认使用172.17.0.x的ip，并且会根据启动顺序变动<br><code>--restart</code>：在容器退出时总是重启容器，保证容器始终运行<br><code>-d</code>：让容器在后台运行</p>\n<h2 id=\"使用docker-compose工具\"><a href=\"#使用docker-compose工具\" class=\"headerlink\" title=\"使用docker-compose工具\"></a>使用docker-compose工具</h2><p>使用<code>docker run</code>命令可以创建并启动容器，但需要一个个容器地启动，这里推荐使用docker-compose工具来进行容器编排和启动。只需要编写一个<code>docker_compose.yaml</code>文件，然后通过<code>docker-compose up -d .</code>命令就可以一次性编排、启动多个容器。以下是docker_compose.yaml文件示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: \"3\"</span><br><span class=\"line\">services: </span><br><span class=\"line\">    nginx: </span><br><span class=\"line\">    \t\t# 指定镜像</span><br><span class=\"line\">        image: nginx</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 指定容器名称</span><br><span class=\"line\">        container_name: nginx_container</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 端口映射</span><br><span class=\"line\">        ports: </span><br><span class=\"line\">            - 8080:8080</span><br><span class=\"line\">            </span><br><span class=\"line\">        # 文件挂载路径</span><br><span class=\"line\">        volumes: </span><br><span class=\"line\">            - /DJANGO_PROJECT:/DJANGO_PROJECT</span><br><span class=\"line\">            - /nginx.conf:/etc/nginx/nginx.conf</span><br><span class=\"line\">            </span><br><span class=\"line\">        # 网络和ip</span><br><span class=\"line\">        networks: </span><br><span class=\"line\">            extnetwork: </span><br><span class=\"line\">                ipv4_address: 192.168.0.2</span><br><span class=\"line\">                </span><br><span class=\"line\">        # 启动后指定的命令</span><br><span class=\"line\">        command: nginx -g 'daemon off;'</span><br><span class=\"line\">        </span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">    </span><br><span class=\"line\">    uwsgi:</span><br><span class=\"line\">        container_name: uwsgi_container</span><br><span class=\"line\">        ports: </span><br><span class=\"line\">            - 8090:8090</span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            - /DJANGO_PROJECT:/DJANGO_PROJECT</span><br><span class=\"line\">            - /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages</span><br><span class=\"line\">        networks:</span><br><span class=\"line\">            extnetwork: </span><br><span class=\"line\">                ipv4_address: 192.168.0.3</span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        command: uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini</span><br><span class=\"line\">        restart: always        </span><br><span class=\"line\"></span><br><span class=\"line\">networks: </span><br><span class=\"line\">    extnetwork: </span><br><span class=\"line\">        ipam: </span><br><span class=\"line\">            config: </span><br><span class=\"line\">            - subnet: 192.168.0.0/16</span><br></pre></td></tr></table></figure>\n\n<p>注意：Nginx容器的启动命令是<code>nginx -g &#39;daemon off;&#39;</code>，这是因为容器启动后执行nginx启动命令开启的nginx进程是第一个进程(pid=1)，而Docker容器将pid=1的进程是否存在作为容器是否正在运行的依据，nginx默认以daemon方式运行，执行完启动命令就在后台运行，此时Docker判断pid=1的进程终止，容器就会退出（如果设置了restart=always参数，则容器会一直重启），因此需要加上<code>daemon off</code>参数。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上使用Docker技术部署一套Nginx + uWSGI + Django的web服务器，是使用Docker技术的一次尝试，主要是利用了Docker文件挂载的这一方式来实现，在实际使用过程中，也发现一些小问题需要优化，欢迎大家有更好的想法和我交流。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Docker容器技术是目前热门的代码部署手段，通过将代码、配置文件、开发环境等打包到一个容器中，就能将其快速部署到生产环境，十分方便快捷。本文将介绍如何使用Docker来部署一套Nginx + uWSGI + Django的生产环境web服务器（Centos7系统）.</p>","more":"<p>阅读前需要对一些基本技术有所了解，以下仅供参考：</p>\n<p>Docker:  <a href=\"https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html</a><br> <a href=\"https://zhuanlan.zhihu.com/p/23599229\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/23599229</a><br>Nginx、uWSGI：<a href=\"https://blog.csdn.net/weixin_40907382/article/details/80824167\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_40907382/article/details/80824167</a></p>\n<h2 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看centos系统版本，内核版本要求不低于3.10</span></span><br><span class=\"line\">uname -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 更新yum</span></span><br><span class=\"line\">sudo yum -y update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装需要的软件包</span></span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 设置yum源</span></span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看仓库中所有docker版本</span></span><br><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 选择其中一个版本安装</span></span><br><span class=\"line\">yum -y install docker-ce-18.06.3.ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Docker服务，并设置为开机启动</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">systemctl enable docker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 测试是否安装成功</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装docker-compose工具（用于容器编排）</span></span><br><span class=\"line\">sudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"镜像准备\"><a href=\"#镜像准备\" class=\"headerlink\" title=\"镜像准备\"></a>镜像准备</h2><p>Nginx：可直接从docker hub中拉取，执行<code>docker pull nginx</code><br>Python：构建uWSGI容器可以基于centos、ubuntu等进行，但为了更轻量化，也可以使用python镜像，同样从docker hub中拉取所需python版本的镜像，例如：<code>docker pull python:3.6.8</code></p>\n<p>接下来，需要基于python镜像制作一个uWSGI服务器镜像。简单的方法是基于python镜像启动一个容器，然后进行python依赖包以及其他环境的安装，随后使用<code>docker commit</code>打包为镜像，但这样做有一些坏处：<br>在容器内安装一些依赖、环境时，会有大量无关内容被添加，并且由于镜像的分层存储，修改容器仅仅是在当前层进行标记、添加、修改，并不会改变上一层，因此使用<code>docker commit</code>制作镜像，会导致镜像越来越臃肿；其次，由于使用<code>docker commit</code>制作的镜像对于其他人来说是黑箱操作，后续进行维护的人无法得知镜像是如何构建的，增加了维护风险和难度。<br>因此，我们使用Dockerfile来构建uWSGI容器，关于Dockerfile的编写本文不再赘述，请参考：<a href=\"https://yeasy.gitbooks.io/docker_practice/content/image/build.html\" target=\"_blank\" rel=\"noopener\">https://yeasy.gitbooks.io/docker_practice/content/image/build.html</a>，一个简单的Dockerfile如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 基于python3.6.8镜像</span></span><br><span class=\"line\">FROM python:3.6.8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 复制Django项目所需的依赖文件清单到容器中</span></span><br><span class=\"line\">COPY requirements.txt /</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装依赖</span></span><br><span class=\"line\">RUN pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple -r /requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建uwsgi软链接</span></span><br><span class=\"line\">RUN ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>镜像制作完成，就可以开始创建容器了，可以直接使用<code>docker run</code>命令来创建，也可以使用<code>docker-compose</code>工具，下面首先介绍<code>docker run</code>的方式：</p>\n<p>Nginx: </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name nginx_container --privileged=true -p 443:443 -p 8080:8080 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /nginx.conf:/etc/nginx/nginx.conf --net staticnet --ip 192.168.0.2 --restart=always -d nginx</span><br></pre></td></tr></table></figure>\n\n<p>uWSGI：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name uwsgi_container --privileged=true -p 8090:8090 -v /DJANGO_PROJECT:/DJANGO_PROJECT -v /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages --net staticnet --ip 192.168.0.3 --restart=always -d uwsgi_image uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini</span><br></pre></td></tr></table></figure>\n\n<p>参数解释：<br><code>-it</code>：让Docker分配一个伪终端,并绑定到容器的标准输入上<br><code>--name</code>：指定容器的名称<br><code>--privileged</code>：让容器内的root用户拥有真正root权限<br><code>-p</code>：指定端口映射，将宿主机的端口映射到容器端口<br><code>-v</code>：指定文件挂载路径，将Django项目、nginx配置文件放在宿主机，然后挂载到容器<br>  说明：uWSGI容器启动时，将宿主机中一个虚拟环境（安装有Django项目所需的python依赖）的依赖包存放路径挂载到容器中python3依赖包存放路径，这样做的初衷是方便后续有新的依赖包需要安装时，可以直接在宿主机下安装，而不需要进入容器。但在实际应用中发现，某些依赖包使用这样方式安装后不会产生软链接，容器内无法使用，因此实际在制作uWSGI镜像时已经进行了依赖安装。后续将会尝试同时挂载python的site-packages目录和bin目录，也许可以解决这个问题。<br><code>--net</code>：指定容器所在的网段（需要提前创建一个网段）<br><code>--ip</code>：指定容器的ip。如果不特别指定，容器默认使用172.17.0.x的ip，并且会根据启动顺序变动<br><code>--restart</code>：在容器退出时总是重启容器，保证容器始终运行<br><code>-d</code>：让容器在后台运行</p>\n<h2 id=\"使用docker-compose工具\"><a href=\"#使用docker-compose工具\" class=\"headerlink\" title=\"使用docker-compose工具\"></a>使用docker-compose工具</h2><p>使用<code>docker run</code>命令可以创建并启动容器，但需要一个个容器地启动，这里推荐使用docker-compose工具来进行容器编排和启动。只需要编写一个<code>docker_compose.yaml</code>文件，然后通过<code>docker-compose up -d .</code>命令就可以一次性编排、启动多个容器。以下是docker_compose.yaml文件示例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: \"3\"</span><br><span class=\"line\">services: </span><br><span class=\"line\">    nginx: </span><br><span class=\"line\">    \t\t# 指定镜像</span><br><span class=\"line\">        image: nginx</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 指定容器名称</span><br><span class=\"line\">        container_name: nginx_container</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 端口映射</span><br><span class=\"line\">        ports: </span><br><span class=\"line\">            - 8080:8080</span><br><span class=\"line\">            </span><br><span class=\"line\">        # 文件挂载路径</span><br><span class=\"line\">        volumes: </span><br><span class=\"line\">            - /DJANGO_PROJECT:/DJANGO_PROJECT</span><br><span class=\"line\">            - /nginx.conf:/etc/nginx/nginx.conf</span><br><span class=\"line\">            </span><br><span class=\"line\">        # 网络和ip</span><br><span class=\"line\">        networks: </span><br><span class=\"line\">            extnetwork: </span><br><span class=\"line\">                ipv4_address: 192.168.0.2</span><br><span class=\"line\">                </span><br><span class=\"line\">        # 启动后指定的命令</span><br><span class=\"line\">        command: nginx -g 'daemon off;'</span><br><span class=\"line\">        </span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        restart: always</span><br><span class=\"line\">    </span><br><span class=\"line\">    uwsgi:</span><br><span class=\"line\">        container_name: uwsgi_container</span><br><span class=\"line\">        ports: </span><br><span class=\"line\">            - 8090:8090</span><br><span class=\"line\">        volumes:</span><br><span class=\"line\">            - /DJANGO_PROJECT:/DJANGO_PROJECT</span><br><span class=\"line\">            - /.virtualenvs/django_project/lib/python3.6/site-packages:/usr/local/lib/python3.6/site-packages</span><br><span class=\"line\">        networks:</span><br><span class=\"line\">            extnetwork: </span><br><span class=\"line\">                ipv4_address: 192.168.0.3</span><br><span class=\"line\">        privileged: true</span><br><span class=\"line\">        command: uwsgi --ini /DJANGO_PROJECT/project/project/uwsgi.ini</span><br><span class=\"line\">        restart: always        </span><br><span class=\"line\"></span><br><span class=\"line\">networks: </span><br><span class=\"line\">    extnetwork: </span><br><span class=\"line\">        ipam: </span><br><span class=\"line\">            config: </span><br><span class=\"line\">            - subnet: 192.168.0.0/16</span><br></pre></td></tr></table></figure>\n\n<p>注意：Nginx容器的启动命令是<code>nginx -g &#39;daemon off;&#39;</code>，这是因为容器启动后执行nginx启动命令开启的nginx进程是第一个进程(pid=1)，而Docker容器将pid=1的进程是否存在作为容器是否正在运行的依据，nginx默认以daemon方式运行，执行完启动命令就在后台运行，此时Docker判断pid=1的进程终止，容器就会退出（如果设置了restart=always参数，则容器会一直重启），因此需要加上<code>daemon off</code>参数。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上使用Docker技术部署一套Nginx + uWSGI + Django的web服务器，是使用Docker技术的一次尝试，主要是利用了Docker文件挂载的这一方式来实现，在实际使用过程中，也发现一些小问题需要优化，欢迎大家有更好的想法和我交流。</p>"},{"title":"Orthanc + OHIF 搭建DICOM web viewer","date":"2019-12-08T14:38:01.000Z","_content":"\n常规的DICOM viewer一般是桌面软件，如果需要通过浏览器查看DICOM影像，可以借助一些开源软件。本文将介绍如何利用开源DICOM server `Orhtanc`以及DICOM web viewer `OHIF viewer`搭建一套DICOM阅片系统。\n\n<!--more-->\n\n## Orthanc\nOrthanc是一个轻量级的、模块化的DICOM服务器，除了实现DICOM协议、WADO协议，它还提供了REST API以及丰富的插件。由于它提供了便捷的REST API，orthanc可以使用任何语言开发，它存储的DICOM图像标签可以通过JSON格式下载，并且orthanc对于存储的DICOM实例可以动态生成对应的PNG图像。\n\n关于Orthanc的使用可以参考其官方文档：\n[https://book.orthanc-server.com/index.html](https://book.orthanc-server.com/index.html)\n\nOrthanc可以运行在windows以及Linux平台下，可以使用其二进制包安装或者编译源码，同时它也提供了Docker镜像，以下介绍通过Docker的方式运行一个Orthanc服务：\n\n- 查看镜像\n\n`docker search orthanc`\n\n![lgt2jJ.png](https://s2.ax1x.com/2020/01/08/lgt2jJ.png)\n- 拉取镜像(注意，只有orthanc-plugins才提供REST API)\n\n`docker pull jodogne/orthanc-plugins`\n\n- 启动容器\n\n`mkdir /tmp/orthanc-db` (创建文件夹用于存放orthanc数据,即DICOM数据)\n`sudo docker run --name orthanc -p 4242:4242 -p 8042:8042 --restart=always -v /tmp/orthanc-db/:/var/lib/orthanc/db/ jodogne/orthanc-plugins`\n\n- 网页查看\n\n`http://orthanc所在的服务器ip:8042`\n默认账号：  orthanc\n默认密码：  orthanc\n可以通过Upload按钮进行文件上传页面，上传DICOM影像\n\n至此orthanc就安装完毕，DICOM viewer（例如OHIF）就可以通过REST API调用，具体API参考：[https://book.orthanc-server.com/users/rest.html](https://book.orthanc-server.com/users/rest.html)\n\n在前面创建容器时挂载的目录`/var/lib/orthanc/db`即orthanc中DICOM文件存放的路径，对应宿主机即`/tmp/orthanc-db/`.Orthanc会将DICOM原始文件、DICOM tag分别作为2个文件存放在这个路径下\n![lgafBj.png](https://s2.ax1x.com/2020/01/08/lgafBj.png)\n\n## OHIF Viewer\nOHIF Viewer是一套基于Cornerstone（一套JavaScript底层组件，用于支持医学影像的显示与交互）开发的纯网页版医学影像浏览前端。其github地址为：[https://github.com/OHIF/Viewers](https://github.com/OHIF/Viewers)\n\n启动项目非常简单，只需要clone下来然后在项目根目录执行`yarn install`、`yarn run dev`即可（官方文档[https://docs.ohif.org/](https://docs.ohif.org/)），不过它默认是连接OHIF提供的一个远程DICOM服务，我们需要修改配置，让它连接到Orthanc。\n打开`platform/viewer/package.json`修改proxy的值为之前启动的Orthanc服务地址，例如`\"proxy\": \"http://192.168.0.23:8042\"`，然后执行`yarn run dev:orthanc`即可对接Orthanc,初次查看影像需要输入orthanc的账号密码（默认）。\n","source":"_posts/Orthanc + OHIF 搭建DICOM web viewer.md","raw":"---\ntitle: Orthanc + OHIF 搭建DICOM web viewer\ndate: 2019-12-08 22:38:01\ntags: [Orthanc,OHIF,DICOM]\ncategories: DICOM\n---\n\n常规的DICOM viewer一般是桌面软件，如果需要通过浏览器查看DICOM影像，可以借助一些开源软件。本文将介绍如何利用开源DICOM server `Orhtanc`以及DICOM web viewer `OHIF viewer`搭建一套DICOM阅片系统。\n\n<!--more-->\n\n## Orthanc\nOrthanc是一个轻量级的、模块化的DICOM服务器，除了实现DICOM协议、WADO协议，它还提供了REST API以及丰富的插件。由于它提供了便捷的REST API，orthanc可以使用任何语言开发，它存储的DICOM图像标签可以通过JSON格式下载，并且orthanc对于存储的DICOM实例可以动态生成对应的PNG图像。\n\n关于Orthanc的使用可以参考其官方文档：\n[https://book.orthanc-server.com/index.html](https://book.orthanc-server.com/index.html)\n\nOrthanc可以运行在windows以及Linux平台下，可以使用其二进制包安装或者编译源码，同时它也提供了Docker镜像，以下介绍通过Docker的方式运行一个Orthanc服务：\n\n- 查看镜像\n\n`docker search orthanc`\n\n![lgt2jJ.png](https://s2.ax1x.com/2020/01/08/lgt2jJ.png)\n- 拉取镜像(注意，只有orthanc-plugins才提供REST API)\n\n`docker pull jodogne/orthanc-plugins`\n\n- 启动容器\n\n`mkdir /tmp/orthanc-db` (创建文件夹用于存放orthanc数据,即DICOM数据)\n`sudo docker run --name orthanc -p 4242:4242 -p 8042:8042 --restart=always -v /tmp/orthanc-db/:/var/lib/orthanc/db/ jodogne/orthanc-plugins`\n\n- 网页查看\n\n`http://orthanc所在的服务器ip:8042`\n默认账号：  orthanc\n默认密码：  orthanc\n可以通过Upload按钮进行文件上传页面，上传DICOM影像\n\n至此orthanc就安装完毕，DICOM viewer（例如OHIF）就可以通过REST API调用，具体API参考：[https://book.orthanc-server.com/users/rest.html](https://book.orthanc-server.com/users/rest.html)\n\n在前面创建容器时挂载的目录`/var/lib/orthanc/db`即orthanc中DICOM文件存放的路径，对应宿主机即`/tmp/orthanc-db/`.Orthanc会将DICOM原始文件、DICOM tag分别作为2个文件存放在这个路径下\n![lgafBj.png](https://s2.ax1x.com/2020/01/08/lgafBj.png)\n\n## OHIF Viewer\nOHIF Viewer是一套基于Cornerstone（一套JavaScript底层组件，用于支持医学影像的显示与交互）开发的纯网页版医学影像浏览前端。其github地址为：[https://github.com/OHIF/Viewers](https://github.com/OHIF/Viewers)\n\n启动项目非常简单，只需要clone下来然后在项目根目录执行`yarn install`、`yarn run dev`即可（官方文档[https://docs.ohif.org/](https://docs.ohif.org/)），不过它默认是连接OHIF提供的一个远程DICOM服务，我们需要修改配置，让它连接到Orthanc。\n打开`platform/viewer/package.json`修改proxy的值为之前启动的Orthanc服务地址，例如`\"proxy\": \"http://192.168.0.23:8042\"`，然后执行`yarn run dev:orthanc`即可对接Orthanc,初次查看影像需要输入orthanc的账号密码（默认）。\n","slug":"Orthanc + OHIF 搭建DICOM web viewer","published":1,"updated":"2020-01-09T04:20:59.579Z","_id":"ck555p50d000aosab0yqy99az","comments":1,"layout":"post","photos":[],"link":"","content":"<p>常规的DICOM viewer一般是桌面软件，如果需要通过浏览器查看DICOM影像，可以借助一些开源软件。本文将介绍如何利用开源DICOM server <code>Orhtanc</code>以及DICOM web viewer <code>OHIF viewer</code>搭建一套DICOM阅片系统。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Orthanc\"><a href=\"#Orthanc\" class=\"headerlink\" title=\"Orthanc\"></a>Orthanc</h2><p>Orthanc是一个轻量级的、模块化的DICOM服务器，除了实现DICOM协议、WADO协议，它还提供了REST API以及丰富的插件。由于它提供了便捷的REST API，orthanc可以使用任何语言开发，它存储的DICOM图像标签可以通过JSON格式下载，并且orthanc对于存储的DICOM实例可以动态生成对应的PNG图像。</p>\n<p>关于Orthanc的使用可以参考其官方文档：<br><a href=\"https://book.orthanc-server.com/index.html\" target=\"_blank\" rel=\"noopener\">https://book.orthanc-server.com/index.html</a></p>\n<p>Orthanc可以运行在windows以及Linux平台下，可以使用其二进制包安装或者编译源码，同时它也提供了Docker镜像，以下介绍通过Docker的方式运行一个Orthanc服务：</p>\n<ul>\n<li>查看镜像</li>\n</ul>\n<p><code>docker search orthanc</code></p>\n<p><img src=\"https://s2.ax1x.com/2020/01/08/lgt2jJ.png\" alt=\"lgt2jJ.png\"></p>\n<ul>\n<li>拉取镜像(注意，只有orthanc-plugins才提供REST API)</li>\n</ul>\n<p><code>docker pull jodogne/orthanc-plugins</code></p>\n<ul>\n<li>启动容器</li>\n</ul>\n<p><code>mkdir /tmp/orthanc-db</code> (创建文件夹用于存放orthanc数据,即DICOM数据)<br><code>sudo docker run --name orthanc -p 4242:4242 -p 8042:8042 --restart=always -v /tmp/orthanc-db/:/var/lib/orthanc/db/ jodogne/orthanc-plugins</code></p>\n<ul>\n<li>网页查看</li>\n</ul>\n<p><code>http://orthanc所在的服务器ip:8042</code><br>默认账号：  orthanc<br>默认密码：  orthanc<br>可以通过Upload按钮进行文件上传页面，上传DICOM影像</p>\n<p>至此orthanc就安装完毕，DICOM viewer（例如OHIF）就可以通过REST API调用，具体API参考：<a href=\"https://book.orthanc-server.com/users/rest.html\" target=\"_blank\" rel=\"noopener\">https://book.orthanc-server.com/users/rest.html</a></p>\n<p>在前面创建容器时挂载的目录<code>/var/lib/orthanc/db</code>即orthanc中DICOM文件存放的路径，对应宿主机即<code>/tmp/orthanc-db/</code>.Orthanc会将DICOM原始文件、DICOM tag分别作为2个文件存放在这个路径下<br><img src=\"https://s2.ax1x.com/2020/01/08/lgafBj.png\" alt=\"lgafBj.png\"></p>\n<h2 id=\"OHIF-Viewer\"><a href=\"#OHIF-Viewer\" class=\"headerlink\" title=\"OHIF Viewer\"></a>OHIF Viewer</h2><p>OHIF Viewer是一套基于Cornerstone（一套JavaScript底层组件，用于支持医学影像的显示与交互）开发的纯网页版医学影像浏览前端。其github地址为：<a href=\"https://github.com/OHIF/Viewers\" target=\"_blank\" rel=\"noopener\">https://github.com/OHIF/Viewers</a></p>\n<p>启动项目非常简单，只需要clone下来然后在项目根目录执行<code>yarn install</code>、<code>yarn run dev</code>即可（官方文档<a href=\"https://docs.ohif.org/\" target=\"_blank\" rel=\"noopener\">https://docs.ohif.org/</a>），不过它默认是连接OHIF提供的一个远程DICOM服务，我们需要修改配置，让它连接到Orthanc。<br>打开<code>platform/viewer/package.json</code>修改proxy的值为之前启动的Orthanc服务地址，例如<code>&quot;proxy&quot;: &quot;http://192.168.0.23:8042&quot;</code>，然后执行<code>yarn run dev:orthanc</code>即可对接Orthanc,初次查看影像需要输入orthanc的账号密码（默认）。</p>\n","site":{"data":{}},"excerpt":"<p>常规的DICOM viewer一般是桌面软件，如果需要通过浏览器查看DICOM影像，可以借助一些开源软件。本文将介绍如何利用开源DICOM server <code>Orhtanc</code>以及DICOM web viewer <code>OHIF viewer</code>搭建一套DICOM阅片系统。</p>","more":"<h2 id=\"Orthanc\"><a href=\"#Orthanc\" class=\"headerlink\" title=\"Orthanc\"></a>Orthanc</h2><p>Orthanc是一个轻量级的、模块化的DICOM服务器，除了实现DICOM协议、WADO协议，它还提供了REST API以及丰富的插件。由于它提供了便捷的REST API，orthanc可以使用任何语言开发，它存储的DICOM图像标签可以通过JSON格式下载，并且orthanc对于存储的DICOM实例可以动态生成对应的PNG图像。</p>\n<p>关于Orthanc的使用可以参考其官方文档：<br><a href=\"https://book.orthanc-server.com/index.html\" target=\"_blank\" rel=\"noopener\">https://book.orthanc-server.com/index.html</a></p>\n<p>Orthanc可以运行在windows以及Linux平台下，可以使用其二进制包安装或者编译源码，同时它也提供了Docker镜像，以下介绍通过Docker的方式运行一个Orthanc服务：</p>\n<ul>\n<li>查看镜像</li>\n</ul>\n<p><code>docker search orthanc</code></p>\n<p><img src=\"https://s2.ax1x.com/2020/01/08/lgt2jJ.png\" alt=\"lgt2jJ.png\"></p>\n<ul>\n<li>拉取镜像(注意，只有orthanc-plugins才提供REST API)</li>\n</ul>\n<p><code>docker pull jodogne/orthanc-plugins</code></p>\n<ul>\n<li>启动容器</li>\n</ul>\n<p><code>mkdir /tmp/orthanc-db</code> (创建文件夹用于存放orthanc数据,即DICOM数据)<br><code>sudo docker run --name orthanc -p 4242:4242 -p 8042:8042 --restart=always -v /tmp/orthanc-db/:/var/lib/orthanc/db/ jodogne/orthanc-plugins</code></p>\n<ul>\n<li>网页查看</li>\n</ul>\n<p><code>http://orthanc所在的服务器ip:8042</code><br>默认账号：  orthanc<br>默认密码：  orthanc<br>可以通过Upload按钮进行文件上传页面，上传DICOM影像</p>\n<p>至此orthanc就安装完毕，DICOM viewer（例如OHIF）就可以通过REST API调用，具体API参考：<a href=\"https://book.orthanc-server.com/users/rest.html\" target=\"_blank\" rel=\"noopener\">https://book.orthanc-server.com/users/rest.html</a></p>\n<p>在前面创建容器时挂载的目录<code>/var/lib/orthanc/db</code>即orthanc中DICOM文件存放的路径，对应宿主机即<code>/tmp/orthanc-db/</code>.Orthanc会将DICOM原始文件、DICOM tag分别作为2个文件存放在这个路径下<br><img src=\"https://s2.ax1x.com/2020/01/08/lgafBj.png\" alt=\"lgafBj.png\"></p>\n<h2 id=\"OHIF-Viewer\"><a href=\"#OHIF-Viewer\" class=\"headerlink\" title=\"OHIF Viewer\"></a>OHIF Viewer</h2><p>OHIF Viewer是一套基于Cornerstone（一套JavaScript底层组件，用于支持医学影像的显示与交互）开发的纯网页版医学影像浏览前端。其github地址为：<a href=\"https://github.com/OHIF/Viewers\" target=\"_blank\" rel=\"noopener\">https://github.com/OHIF/Viewers</a></p>\n<p>启动项目非常简单，只需要clone下来然后在项目根目录执行<code>yarn install</code>、<code>yarn run dev</code>即可（官方文档<a href=\"https://docs.ohif.org/\" target=\"_blank\" rel=\"noopener\">https://docs.ohif.org/</a>），不过它默认是连接OHIF提供的一个远程DICOM服务，我们需要修改配置，让它连接到Orthanc。<br>打开<code>platform/viewer/package.json</code>修改proxy的值为之前启动的Orthanc服务地址，例如<code>&quot;proxy&quot;: &quot;http://192.168.0.23:8042&quot;</code>，然后执行<code>yarn run dev:orthanc</code>即可对接Orthanc,初次查看影像需要输入orthanc的账号密码（默认）。</p>"},{"title":"使用SimpleITK读取DICOM","date":"2019-06-08T11:38:01.000Z","_content":"\nSimpleITK是ITK的简化接口，专门用于处理医学影像，在SimpleITK中，图像的概念与我们在计算机视觉中常用的RGB图像差异很大，后者只是一个多维矩阵，是一个数学上的概念，而在SimpleITK中，图像是一种物理实体，图像中的每一个像素都是物理空间中的一个点，不光有着像素值，还有着坐标，间距，方向等概念。本文将介绍python版SimpleITK读取DICOM并从DICOM study中提取需要的序列的方法。\n\n<!--more-->\n\n## 安装\n`pip install SimpleITK`\n\n## 读取DICOM影像\n\n- 读取单张DICOM影像\n\n```python\nimport SimpleITK as sitk\n\nfile = sitk.ReadImage(filepath)\n \n # 图像大小\nfile.GetSize()\n# 坐标原点\nfile.GetOrigin()  \n# 像素间距\nfile.GetSpacing()\n# 方向\nfile.GetDirection()\n\n# 获取影像元数据(返回DICOM tags元组)\nfile.GetMetaDataKeys()\n\n# 像素矩阵\npixel_array = sitk.GetArrayFromImage(file)\n```\n\n- 读取DICOM序列\n```python\nimport os\nimport SimpleITK as sitk\n\npath = \"/dicom_study_dir\"\n\nreader = sitk.ImageSeriesReader()\nseriesIDs = reader.GetGDCMSeriesIDs(path)\ndicom_names = reader.GetGDCMSeriesFileNames(path, seriesID[0])\nreader.SetFileNames(dicom_names)\nimage = reader.Execute()\n```\n\n## 读取特定序列并保存为NIfTI格式\n医学影像处理时，常常需要三维格式的数据，可以利用SimpleITK从DICOM study文件夹中提取需要的序列，并写入NIfTI文件。以下为示例：\n```python\nimport logging\nimport os\nimport SimpleITK as sitk\n\n# 从DICOM影像中读取Tag信息\ndef get_tag(dcm, key, default_value=''):\n    try:\n        value = dcm.GetMetaData(key).strip()\n    except Exception as e:\n        logging.error(e)\n        value = default_value\n\n    return value\n\n# 从DICOM study文件夹中提取需要的序列并转换\ndef extract_series(study_dir, series_desc):\n    # 获取所有series id,返回一个元组\n    series_ids = sitk.ImageSeriesReader.GetGDCMSeriesIDs(study_dir)\n    for series_id in series_ids:\n        # 获取该序列的所有DICOM影像，返回一个包含该序列所有影像路径的元组\n        files = sitk.ImageSeriesReader.GetGDCMSeriesFileNames(study_dir, series_id, recursive=False, useSeriesDetails=False)\n        reader = sitk.ImageSeriesReader()\n        reader.SetFileNames(files)\n        try:\n            img = reader.Execute()\n        except RuntimeError as e:\n            # 有的DICOM影像将一个序列所有影像都放在同一张DICOM文件中（MultiFrame），读取时会出现下面这个异常\n            if 'The file in the series have unsupported 3 dimensions' in str(e):\n                img = sitk.ReadImage(files[0])\n            else:\n                logging.error('Error in reading image, dir %s, series id %s, detail message: %s' % (study_dir, series_id, e))\n                continue\n\t\t# 从当前序列取一张影像，便于读取其Tag信息                \n        dcm = sitk.ReadImage(files[0])\n        # 获取当前序列的序列描述\n        series_description = get_tag(dcm, '0008|103e')\n        # 判断是否是需要的序列\n        if series_description == series_desc:\n            nii_name = str(series_id) + \"nii.gz\"\n            # 写入nii.gz文件\n            sitk.WriteImage(img, os.path.join(study_dir, nii_name))\n        else:\n            continue\n\n```\n\n","source":"_posts/使用SimpleITK读取DICOM.md","raw":"---\ntitle: 使用SimpleITK读取DICOM\ndate: 2019-06-08 19:38:01\ntags: [SimpleITK,DICOM,Python]\ncategories: DICOM\n---\n\nSimpleITK是ITK的简化接口，专门用于处理医学影像，在SimpleITK中，图像的概念与我们在计算机视觉中常用的RGB图像差异很大，后者只是一个多维矩阵，是一个数学上的概念，而在SimpleITK中，图像是一种物理实体，图像中的每一个像素都是物理空间中的一个点，不光有着像素值，还有着坐标，间距，方向等概念。本文将介绍python版SimpleITK读取DICOM并从DICOM study中提取需要的序列的方法。\n\n<!--more-->\n\n## 安装\n`pip install SimpleITK`\n\n## 读取DICOM影像\n\n- 读取单张DICOM影像\n\n```python\nimport SimpleITK as sitk\n\nfile = sitk.ReadImage(filepath)\n \n # 图像大小\nfile.GetSize()\n# 坐标原点\nfile.GetOrigin()  \n# 像素间距\nfile.GetSpacing()\n# 方向\nfile.GetDirection()\n\n# 获取影像元数据(返回DICOM tags元组)\nfile.GetMetaDataKeys()\n\n# 像素矩阵\npixel_array = sitk.GetArrayFromImage(file)\n```\n\n- 读取DICOM序列\n```python\nimport os\nimport SimpleITK as sitk\n\npath = \"/dicom_study_dir\"\n\nreader = sitk.ImageSeriesReader()\nseriesIDs = reader.GetGDCMSeriesIDs(path)\ndicom_names = reader.GetGDCMSeriesFileNames(path, seriesID[0])\nreader.SetFileNames(dicom_names)\nimage = reader.Execute()\n```\n\n## 读取特定序列并保存为NIfTI格式\n医学影像处理时，常常需要三维格式的数据，可以利用SimpleITK从DICOM study文件夹中提取需要的序列，并写入NIfTI文件。以下为示例：\n```python\nimport logging\nimport os\nimport SimpleITK as sitk\n\n# 从DICOM影像中读取Tag信息\ndef get_tag(dcm, key, default_value=''):\n    try:\n        value = dcm.GetMetaData(key).strip()\n    except Exception as e:\n        logging.error(e)\n        value = default_value\n\n    return value\n\n# 从DICOM study文件夹中提取需要的序列并转换\ndef extract_series(study_dir, series_desc):\n    # 获取所有series id,返回一个元组\n    series_ids = sitk.ImageSeriesReader.GetGDCMSeriesIDs(study_dir)\n    for series_id in series_ids:\n        # 获取该序列的所有DICOM影像，返回一个包含该序列所有影像路径的元组\n        files = sitk.ImageSeriesReader.GetGDCMSeriesFileNames(study_dir, series_id, recursive=False, useSeriesDetails=False)\n        reader = sitk.ImageSeriesReader()\n        reader.SetFileNames(files)\n        try:\n            img = reader.Execute()\n        except RuntimeError as e:\n            # 有的DICOM影像将一个序列所有影像都放在同一张DICOM文件中（MultiFrame），读取时会出现下面这个异常\n            if 'The file in the series have unsupported 3 dimensions' in str(e):\n                img = sitk.ReadImage(files[0])\n            else:\n                logging.error('Error in reading image, dir %s, series id %s, detail message: %s' % (study_dir, series_id, e))\n                continue\n\t\t# 从当前序列取一张影像，便于读取其Tag信息                \n        dcm = sitk.ReadImage(files[0])\n        # 获取当前序列的序列描述\n        series_description = get_tag(dcm, '0008|103e')\n        # 判断是否是需要的序列\n        if series_description == series_desc:\n            nii_name = str(series_id) + \"nii.gz\"\n            # 写入nii.gz文件\n            sitk.WriteImage(img, os.path.join(study_dir, nii_name))\n        else:\n            continue\n\n```\n\n","slug":"使用SimpleITK读取DICOM","published":1,"updated":"2020-01-09T04:19:58.593Z","_id":"ck555p50g000dosabhn6u83w6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>SimpleITK是ITK的简化接口，专门用于处理医学影像，在SimpleITK中，图像的概念与我们在计算机视觉中常用的RGB图像差异很大，后者只是一个多维矩阵，是一个数学上的概念，而在SimpleITK中，图像是一种物理实体，图像中的每一个像素都是物理空间中的一个点，不光有着像素值，还有着坐标，间距，方向等概念。本文将介绍python版SimpleITK读取DICOM并从DICOM study中提取需要的序列的方法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pip install SimpleITK</code></p>\n<h2 id=\"读取DICOM影像\"><a href=\"#读取DICOM影像\" class=\"headerlink\" title=\"读取DICOM影像\"></a>读取DICOM影像</h2><ul>\n<li>读取单张DICOM影像</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\">file = sitk.ReadImage(filepath)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 图像大小</span></span><br><span class=\"line\">file.GetSize()</span><br><span class=\"line\"><span class=\"comment\"># 坐标原点</span></span><br><span class=\"line\">file.GetOrigin()  </span><br><span class=\"line\"><span class=\"comment\"># 像素间距</span></span><br><span class=\"line\">file.GetSpacing()</span><br><span class=\"line\"><span class=\"comment\"># 方向</span></span><br><span class=\"line\">file.GetDirection()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取影像元数据(返回DICOM tags元组)</span></span><br><span class=\"line\">file.GetMetaDataKeys()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 像素矩阵</span></span><br><span class=\"line\">pixel_array = sitk.GetArrayFromImage(file)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>读取DICOM序列<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">\"/dicom_study_dir\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">reader = sitk.ImageSeriesReader()</span><br><span class=\"line\">seriesIDs = reader.GetGDCMSeriesIDs(path)</span><br><span class=\"line\">dicom_names = reader.GetGDCMSeriesFileNames(path, seriesID[<span class=\"number\">0</span>])</span><br><span class=\"line\">reader.SetFileNames(dicom_names)</span><br><span class=\"line\">image = reader.Execute()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"读取特定序列并保存为NIfTI格式\"><a href=\"#读取特定序列并保存为NIfTI格式\" class=\"headerlink\" title=\"读取特定序列并保存为NIfTI格式\"></a>读取特定序列并保存为NIfTI格式</h2><p>医学影像处理时，常常需要三维格式的数据，可以利用SimpleITK从DICOM study文件夹中提取需要的序列，并写入NIfTI文件。以下为示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从DICOM影像中读取Tag信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tag</span><span class=\"params\">(dcm, key, default_value=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        value = dcm.GetMetaData(key).strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        logging.error(e)</span><br><span class=\"line\">        value = default_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从DICOM study文件夹中提取需要的序列并转换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extract_series</span><span class=\"params\">(study_dir, series_desc)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取所有series id,返回一个元组</span></span><br><span class=\"line\">    series_ids = sitk.ImageSeriesReader.GetGDCMSeriesIDs(study_dir)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> series_id <span class=\"keyword\">in</span> series_ids:</span><br><span class=\"line\">        <span class=\"comment\"># 获取该序列的所有DICOM影像，返回一个包含该序列所有影像路径的元组</span></span><br><span class=\"line\">        files = sitk.ImageSeriesReader.GetGDCMSeriesFileNames(study_dir, series_id, recursive=<span class=\"literal\">False</span>, useSeriesDetails=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        reader = sitk.ImageSeriesReader()</span><br><span class=\"line\">        reader.SetFileNames(files)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            img = reader.Execute()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> RuntimeError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"comment\"># 有的DICOM影像将一个序列所有影像都放在同一张DICOM文件中（MultiFrame），读取时会出现下面这个异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'The file in the series have unsupported 3 dimensions'</span> <span class=\"keyword\">in</span> str(e):</span><br><span class=\"line\">                img = sitk.ReadImage(files[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                logging.error(<span class=\"string\">'Error in reading image, dir %s, series id %s, detail message: %s'</span> % (study_dir, series_id, e))</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 从当前序列取一张影像，便于读取其Tag信息                </span></span><br><span class=\"line\">        dcm = sitk.ReadImage(files[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># 获取当前序列的序列描述</span></span><br><span class=\"line\">        series_description = get_tag(dcm, <span class=\"string\">'0008|103e'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 判断是否是需要的序列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> series_description == series_desc:</span><br><span class=\"line\">            nii_name = str(series_id) + <span class=\"string\">\"nii.gz\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入nii.gz文件</span></span><br><span class=\"line\">            sitk.WriteImage(img, os.path.join(study_dir, nii_name))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>SimpleITK是ITK的简化接口，专门用于处理医学影像，在SimpleITK中，图像的概念与我们在计算机视觉中常用的RGB图像差异很大，后者只是一个多维矩阵，是一个数学上的概念，而在SimpleITK中，图像是一种物理实体，图像中的每一个像素都是物理空间中的一个点，不光有着像素值，还有着坐标，间距，方向等概念。本文将介绍python版SimpleITK读取DICOM并从DICOM study中提取需要的序列的方法。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pip install SimpleITK</code></p>\n<h2 id=\"读取DICOM影像\"><a href=\"#读取DICOM影像\" class=\"headerlink\" title=\"读取DICOM影像\"></a>读取DICOM影像</h2><ul>\n<li>读取单张DICOM影像</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\">file = sitk.ReadImage(filepath)</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 图像大小</span></span><br><span class=\"line\">file.GetSize()</span><br><span class=\"line\"><span class=\"comment\"># 坐标原点</span></span><br><span class=\"line\">file.GetOrigin()  </span><br><span class=\"line\"><span class=\"comment\"># 像素间距</span></span><br><span class=\"line\">file.GetSpacing()</span><br><span class=\"line\"><span class=\"comment\"># 方向</span></span><br><span class=\"line\">file.GetDirection()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取影像元数据(返回DICOM tags元组)</span></span><br><span class=\"line\">file.GetMetaDataKeys()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 像素矩阵</span></span><br><span class=\"line\">pixel_array = sitk.GetArrayFromImage(file)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>读取DICOM序列<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\">path = <span class=\"string\">\"/dicom_study_dir\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">reader = sitk.ImageSeriesReader()</span><br><span class=\"line\">seriesIDs = reader.GetGDCMSeriesIDs(path)</span><br><span class=\"line\">dicom_names = reader.GetGDCMSeriesFileNames(path, seriesID[<span class=\"number\">0</span>])</span><br><span class=\"line\">reader.SetFileNames(dicom_names)</span><br><span class=\"line\">image = reader.Execute()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"读取特定序列并保存为NIfTI格式\"><a href=\"#读取特定序列并保存为NIfTI格式\" class=\"headerlink\" title=\"读取特定序列并保存为NIfTI格式\"></a>读取特定序列并保存为NIfTI格式</h2><p>医学影像处理时，常常需要三维格式的数据，可以利用SimpleITK从DICOM study文件夹中提取需要的序列，并写入NIfTI文件。以下为示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleITK <span class=\"keyword\">as</span> sitk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从DICOM影像中读取Tag信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_tag</span><span class=\"params\">(dcm, key, default_value=<span class=\"string\">''</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        value = dcm.GetMetaData(key).strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        logging.error(e)</span><br><span class=\"line\">        value = default_value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从DICOM study文件夹中提取需要的序列并转换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extract_series</span><span class=\"params\">(study_dir, series_desc)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 获取所有series id,返回一个元组</span></span><br><span class=\"line\">    series_ids = sitk.ImageSeriesReader.GetGDCMSeriesIDs(study_dir)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> series_id <span class=\"keyword\">in</span> series_ids:</span><br><span class=\"line\">        <span class=\"comment\"># 获取该序列的所有DICOM影像，返回一个包含该序列所有影像路径的元组</span></span><br><span class=\"line\">        files = sitk.ImageSeriesReader.GetGDCMSeriesFileNames(study_dir, series_id, recursive=<span class=\"literal\">False</span>, useSeriesDetails=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        reader = sitk.ImageSeriesReader()</span><br><span class=\"line\">        reader.SetFileNames(files)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            img = reader.Execute()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> RuntimeError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"comment\"># 有的DICOM影像将一个序列所有影像都放在同一张DICOM文件中（MultiFrame），读取时会出现下面这个异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">'The file in the series have unsupported 3 dimensions'</span> <span class=\"keyword\">in</span> str(e):</span><br><span class=\"line\">                img = sitk.ReadImage(files[<span class=\"number\">0</span>])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                logging.error(<span class=\"string\">'Error in reading image, dir %s, series id %s, detail message: %s'</span> % (study_dir, series_id, e))</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 从当前序列取一张影像，便于读取其Tag信息                </span></span><br><span class=\"line\">        dcm = sitk.ReadImage(files[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"comment\"># 获取当前序列的序列描述</span></span><br><span class=\"line\">        series_description = get_tag(dcm, <span class=\"string\">'0008|103e'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 判断是否是需要的序列</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> series_description == series_desc:</span><br><span class=\"line\">            nii_name = str(series_id) + <span class=\"string\">\"nii.gz\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入nii.gz文件</span></span><br><span class=\"line\">            sitk.WriteImage(img, os.path.join(study_dir, nii_name))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>"},{"title":"使用python将PDF转换为DICOM格式","date":"2019-06-25T02:38:01.000Z","_content":"\n由于公司业务需要，尝试将AI辅助诊断报告（PDF格式）转换为DICOM格式，这样，当DICOM影像上传到云平台计算完成后，可以将生成的AI辅助诊断报告推送到医院PACS系统，医生就可以在DICOM viewer中同时看到病人原始影像和AI报告。\n\n<!--more-->\n\n## 思路\nDICOM影像通常分为三个层级：`Study`、`Series`、`Instance`，其中Study代表病人一次检查的全部影像，通常放在一个文件夹内，而Series则代表这次检查中的不同影像序列，每个序列的扫描参数、用途各有差异，而Instance则是代表每张影像的实体。为了区分影像，DICOM标准中对于Study、Series、Intance的序号（UID）命名有着明确的规范，另外对于影像的编码格式、传输语法以及影像信息都有要求，在创建DICOM影像时都要注意。\n\nDICOM tag信息主要分为三大部分，第一部分File Meta文件头，指定了影像最重要的基本信息，包含编码格式、传输语法等信息，第二部分则是常规的病人信息、影像信息字段，而影像的像素数据则保存在第三部分`Pixel Data`字段中。\n\n为了将PDF报告转换成DICOM格式，可以先利用`pdf2image`将PDF转换为常见的图片格式，再将图片转换为`bytes`类型数据，写入DICOM tag中的`Pixel Data`字段，同时还需要给这些创建的DICOM影像指定UID、编码格式、传输语法等Tag信息。\n\n## 代码\n以下是PDF转DICOM的参考代码，注意这里的应用情况是将PDF转换后的DICOM影像写入到原始DICOM文件夹中，支持含有多页的PDF文件\n\n```python\nimport os\nimport tempfile\nimport datetime\nimport pydicom\nfrom pydicom.dataset import Dataset, FileDataset\nfrom pdf2image import convert_from_path\n\n\n# 从DICOM study文件夹中读取影像，返回最后一张（InstanceUID最大的一张）影像信息的字典\ndef read_dcm(dicom_dir):\n    dicom_list = os.listdir(dicom_dir)\n    info_list = []\n    for dicom in dicom_list:\n        # 使用pydicom读取DICOM影像信息\n        ds = pydicom.dcmread(os.path.join(dicom_dir, dicom))\n\n        info_dict = {\n            'MediaStorageSOPInstanceUID': ds.file_meta.MediaStorageSOPInstanceUID,\n            'MediaStorageSOPClassUID': ds.file_meta.MediaStorageSOPClassUID,\n            'ImplementationClassUID': ds.file_meta.ImplementationClassUID,\n            'PatientName': ds.PatientName,\n            'PatientID': ds.PatientID,\n            'PatientSex': ds.PatientSex,\n            'PatientBirthDate': ds.PatientBirthDate,\n            'PatientAge': ds.PatientAge,\n            'ContentDate': ds.ContentDate,\n            'ContentTime': ds.ContentTime,\n            'SOPClassUID': ds.SOPClassUID,\n            'SOPInstanceUID': ds.SOPInstanceUID,\n            'StudyInstanceUID': ds.StudyInstanceUID,\n            'SeriesInstanceUID': ds.SeriesInstanceUID,\n            'InstanceNumber': ds.InstanceNumber,\n            'SeriesNumber': ds.SeriesNumber,\n        }\n        info_list.append(info_dict)\n\n    # 根据InstanceUID排序\n    sort_list = sorted(info_list, key=lambda x: x['MediaStorageSOPInstanceUID'])\n\n    return sort_list[-1]\n\n\n# 将pdf报告转换后的图片数据写入DICOM影像，并放到原始DICOM文件夹中\ndef write_dcm(index, img, dicom, dicom_dir):\n    # 用于将InstanceUID尾数加1\n    chguid = lambda x: x.replace(x[-1], str(int(x[-1]) + index + 1))\n\n    # 创建临时文件名\n    suffix = '.dcm'\n    filename_little_endian = tempfile.NamedTemporaryFile(suffix=suffix).name\n    # filename_big_endian = tempfile.NamedTemporaryFile(suffix=suffix).name\n\n    # 填充DICOM文件头必要信息\n    file_meta = Dataset()\n    file_meta.MediaStorageSOPClassUID = dicom['MediaStorageSOPClassUID']\n    file_meta.MediaStorageSOPInstanceUID = chguid(dicom['MediaStorageSOPInstanceUID'])\n    file_meta.ImplementationClassUID = dicom['ImplementationClassUID']\n\n    # 创建一个FileDataset实例，初始时没有影像数据，只提供文件头(file meta)\n    ds = FileDataset(filename_little_endian, {}, file_meta=file_meta, preamble=b\"\\0\" * 128)\n\n    # 加入DICOM tag信息（不包含所有）\n    ds.PatientName = dicom['PatientName']\n    ds.PatientID = dicom['PatientID']\n    ds.PatientSex = dicom['PatientSex']\n    ds.PatientBirthDate = dicom['PatientBirthDate']\n    ds.PatientAge = dicom['PatientAge']\n\n    # Set the transfer syntax\n    # ds.is_little_endian = True\n    # ds.is_implicit_VR = True\n\n    # 加入DICOM tag信息（不包含所有）\n    dt = datetime.datetime.now()\n    ds.ContentDate = dt\n    time_str = dt.strftime('%H%M%S.%f')\n    ds.ContentTime = time_str\n\n    # 生成StudyUID, SeriesUID, InstanceUID\n    ds.SOPClassUID = dicom['SOPClassUID']\n    ds.SOPInstanceUID = chguid(dicom['SOPInstanceUID'])\n    ds.StudyInstanceUID = dicom['StudyInstanceUID']\n    ds.SeriesInstanceUID = dicom['SeriesInstanceUID'] + '.1'\n    ds.InstanceNumber = index + 1\n    ds.SeriesNumber = str(int(dicom['SeriesNumber']) + 1)\n\n    # 指定影像参数\n    ds.Rows = img.size[1]\n    ds.Columns = img.size[0]\n    ds.SamplesPerPixel = 3\n    ds.PhotometricInterpretation = \"RGB\"\n    ds.HighBit = 7\n    ds.BitsStored = 8\n    ds.BitsAllocated = 8\n    ds.PixelRepresentation = 0\n\n    # 将img对象转换为bytes类型，写入PixelData字段\n    ds.PixelData = img.tobytes()\n\n    # 指定TransferSyntax等信息\n    ds.file_meta.TransferSyntaxUID = pydicom.uid.ExplicitVRBigEndian\n    ds.is_little_endian = False\n    ds.is_implicit_VR = False\n\n    # 保存影像文件\n    file_name = 'report_{}.dcm'.format(index)\n    file_path = os.path.join(dicom_dir, file_name)\n    ds.save_as(file_path)\n\n\ndef main(pdf_path, dicom_dir):\n    # 将pdf转换为图片\n    images_list = convert_from_path(pdf_path)\n\n    # 从DICOM文件夹中读取最后一张影像的信息\n    dicom_info = read_dcm(dicom_dir)\n\n    # 创建DICOM影像并写入图片数据\n    for index, img in enumerate(images_list):\n        write_dcm(index, img, dicom_info, dicom_dir)\n\n\nif __name__ == '__main__':\n    pdf_path = '/home/ray/dcm_report/report.pdf'\n    dicom_dir = '/home/ray/dcm_report/dcm_data'\n\n    main(pdf_path, dicom_dir)\n\n```\n\n\n\n","source":"_posts/使用python将PDF转换为DICOM格式.md","raw":"---\ntitle: 使用python将PDF转换为DICOM格式\ndate: 2019-06-25 10:38:01\ntags: [DICOM,Python]\ncategories: DICOM\n---\n\n由于公司业务需要，尝试将AI辅助诊断报告（PDF格式）转换为DICOM格式，这样，当DICOM影像上传到云平台计算完成后，可以将生成的AI辅助诊断报告推送到医院PACS系统，医生就可以在DICOM viewer中同时看到病人原始影像和AI报告。\n\n<!--more-->\n\n## 思路\nDICOM影像通常分为三个层级：`Study`、`Series`、`Instance`，其中Study代表病人一次检查的全部影像，通常放在一个文件夹内，而Series则代表这次检查中的不同影像序列，每个序列的扫描参数、用途各有差异，而Instance则是代表每张影像的实体。为了区分影像，DICOM标准中对于Study、Series、Intance的序号（UID）命名有着明确的规范，另外对于影像的编码格式、传输语法以及影像信息都有要求，在创建DICOM影像时都要注意。\n\nDICOM tag信息主要分为三大部分，第一部分File Meta文件头，指定了影像最重要的基本信息，包含编码格式、传输语法等信息，第二部分则是常规的病人信息、影像信息字段，而影像的像素数据则保存在第三部分`Pixel Data`字段中。\n\n为了将PDF报告转换成DICOM格式，可以先利用`pdf2image`将PDF转换为常见的图片格式，再将图片转换为`bytes`类型数据，写入DICOM tag中的`Pixel Data`字段，同时还需要给这些创建的DICOM影像指定UID、编码格式、传输语法等Tag信息。\n\n## 代码\n以下是PDF转DICOM的参考代码，注意这里的应用情况是将PDF转换后的DICOM影像写入到原始DICOM文件夹中，支持含有多页的PDF文件\n\n```python\nimport os\nimport tempfile\nimport datetime\nimport pydicom\nfrom pydicom.dataset import Dataset, FileDataset\nfrom pdf2image import convert_from_path\n\n\n# 从DICOM study文件夹中读取影像，返回最后一张（InstanceUID最大的一张）影像信息的字典\ndef read_dcm(dicom_dir):\n    dicom_list = os.listdir(dicom_dir)\n    info_list = []\n    for dicom in dicom_list:\n        # 使用pydicom读取DICOM影像信息\n        ds = pydicom.dcmread(os.path.join(dicom_dir, dicom))\n\n        info_dict = {\n            'MediaStorageSOPInstanceUID': ds.file_meta.MediaStorageSOPInstanceUID,\n            'MediaStorageSOPClassUID': ds.file_meta.MediaStorageSOPClassUID,\n            'ImplementationClassUID': ds.file_meta.ImplementationClassUID,\n            'PatientName': ds.PatientName,\n            'PatientID': ds.PatientID,\n            'PatientSex': ds.PatientSex,\n            'PatientBirthDate': ds.PatientBirthDate,\n            'PatientAge': ds.PatientAge,\n            'ContentDate': ds.ContentDate,\n            'ContentTime': ds.ContentTime,\n            'SOPClassUID': ds.SOPClassUID,\n            'SOPInstanceUID': ds.SOPInstanceUID,\n            'StudyInstanceUID': ds.StudyInstanceUID,\n            'SeriesInstanceUID': ds.SeriesInstanceUID,\n            'InstanceNumber': ds.InstanceNumber,\n            'SeriesNumber': ds.SeriesNumber,\n        }\n        info_list.append(info_dict)\n\n    # 根据InstanceUID排序\n    sort_list = sorted(info_list, key=lambda x: x['MediaStorageSOPInstanceUID'])\n\n    return sort_list[-1]\n\n\n# 将pdf报告转换后的图片数据写入DICOM影像，并放到原始DICOM文件夹中\ndef write_dcm(index, img, dicom, dicom_dir):\n    # 用于将InstanceUID尾数加1\n    chguid = lambda x: x.replace(x[-1], str(int(x[-1]) + index + 1))\n\n    # 创建临时文件名\n    suffix = '.dcm'\n    filename_little_endian = tempfile.NamedTemporaryFile(suffix=suffix).name\n    # filename_big_endian = tempfile.NamedTemporaryFile(suffix=suffix).name\n\n    # 填充DICOM文件头必要信息\n    file_meta = Dataset()\n    file_meta.MediaStorageSOPClassUID = dicom['MediaStorageSOPClassUID']\n    file_meta.MediaStorageSOPInstanceUID = chguid(dicom['MediaStorageSOPInstanceUID'])\n    file_meta.ImplementationClassUID = dicom['ImplementationClassUID']\n\n    # 创建一个FileDataset实例，初始时没有影像数据，只提供文件头(file meta)\n    ds = FileDataset(filename_little_endian, {}, file_meta=file_meta, preamble=b\"\\0\" * 128)\n\n    # 加入DICOM tag信息（不包含所有）\n    ds.PatientName = dicom['PatientName']\n    ds.PatientID = dicom['PatientID']\n    ds.PatientSex = dicom['PatientSex']\n    ds.PatientBirthDate = dicom['PatientBirthDate']\n    ds.PatientAge = dicom['PatientAge']\n\n    # Set the transfer syntax\n    # ds.is_little_endian = True\n    # ds.is_implicit_VR = True\n\n    # 加入DICOM tag信息（不包含所有）\n    dt = datetime.datetime.now()\n    ds.ContentDate = dt\n    time_str = dt.strftime('%H%M%S.%f')\n    ds.ContentTime = time_str\n\n    # 生成StudyUID, SeriesUID, InstanceUID\n    ds.SOPClassUID = dicom['SOPClassUID']\n    ds.SOPInstanceUID = chguid(dicom['SOPInstanceUID'])\n    ds.StudyInstanceUID = dicom['StudyInstanceUID']\n    ds.SeriesInstanceUID = dicom['SeriesInstanceUID'] + '.1'\n    ds.InstanceNumber = index + 1\n    ds.SeriesNumber = str(int(dicom['SeriesNumber']) + 1)\n\n    # 指定影像参数\n    ds.Rows = img.size[1]\n    ds.Columns = img.size[0]\n    ds.SamplesPerPixel = 3\n    ds.PhotometricInterpretation = \"RGB\"\n    ds.HighBit = 7\n    ds.BitsStored = 8\n    ds.BitsAllocated = 8\n    ds.PixelRepresentation = 0\n\n    # 将img对象转换为bytes类型，写入PixelData字段\n    ds.PixelData = img.tobytes()\n\n    # 指定TransferSyntax等信息\n    ds.file_meta.TransferSyntaxUID = pydicom.uid.ExplicitVRBigEndian\n    ds.is_little_endian = False\n    ds.is_implicit_VR = False\n\n    # 保存影像文件\n    file_name = 'report_{}.dcm'.format(index)\n    file_path = os.path.join(dicom_dir, file_name)\n    ds.save_as(file_path)\n\n\ndef main(pdf_path, dicom_dir):\n    # 将pdf转换为图片\n    images_list = convert_from_path(pdf_path)\n\n    # 从DICOM文件夹中读取最后一张影像的信息\n    dicom_info = read_dcm(dicom_dir)\n\n    # 创建DICOM影像并写入图片数据\n    for index, img in enumerate(images_list):\n        write_dcm(index, img, dicom_info, dicom_dir)\n\n\nif __name__ == '__main__':\n    pdf_path = '/home/ray/dcm_report/report.pdf'\n    dicom_dir = '/home/ray/dcm_report/dcm_data'\n\n    main(pdf_path, dicom_dir)\n\n```\n\n\n\n","slug":"使用python将PDF转换为DICOM格式","published":1,"updated":"2020-01-09T04:20:27.632Z","_id":"ck567smzu0000fcab91tf50be","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于公司业务需要，尝试将AI辅助诊断报告（PDF格式）转换为DICOM格式，这样，当DICOM影像上传到云平台计算完成后，可以将生成的AI辅助诊断报告推送到医院PACS系统，医生就可以在DICOM viewer中同时看到病人原始影像和AI报告。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>DICOM影像通常分为三个层级：<code>Study</code>、<code>Series</code>、<code>Instance</code>，其中Study代表病人一次检查的全部影像，通常放在一个文件夹内，而Series则代表这次检查中的不同影像序列，每个序列的扫描参数、用途各有差异，而Instance则是代表每张影像的实体。为了区分影像，DICOM标准中对于Study、Series、Intance的序号（UID）命名有着明确的规范，另外对于影像的编码格式、传输语法以及影像信息都有要求，在创建DICOM影像时都要注意。</p>\n<p>DICOM tag信息主要分为三大部分，第一部分File Meta文件头，指定了影像最重要的基本信息，包含编码格式、传输语法等信息，第二部分则是常规的病人信息、影像信息字段，而影像的像素数据则保存在第三部分<code>Pixel Data</code>字段中。</p>\n<p>为了将PDF报告转换成DICOM格式，可以先利用<code>pdf2image</code>将PDF转换为常见的图片格式，再将图片转换为<code>bytes</code>类型数据，写入DICOM tag中的<code>Pixel Data</code>字段，同时还需要给这些创建的DICOM影像指定UID、编码格式、传输语法等Tag信息。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>以下是PDF转DICOM的参考代码，注意这里的应用情况是将PDF转换后的DICOM影像写入到原始DICOM文件夹中，支持含有多页的PDF文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> tempfile</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> pydicom</span><br><span class=\"line\"><span class=\"keyword\">from</span> pydicom.dataset <span class=\"keyword\">import</span> Dataset, FileDataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> pdf2image <span class=\"keyword\">import</span> convert_from_path</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从DICOM study文件夹中读取影像，返回最后一张（InstanceUID最大的一张）影像信息的字典</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_dcm</span><span class=\"params\">(dicom_dir)</span>:</span></span><br><span class=\"line\">    dicom_list = os.listdir(dicom_dir)</span><br><span class=\"line\">    info_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dicom <span class=\"keyword\">in</span> dicom_list:</span><br><span class=\"line\">        <span class=\"comment\"># 使用pydicom读取DICOM影像信息</span></span><br><span class=\"line\">        ds = pydicom.dcmread(os.path.join(dicom_dir, dicom))</span><br><span class=\"line\"></span><br><span class=\"line\">        info_dict = &#123;</span><br><span class=\"line\">            <span class=\"string\">'MediaStorageSOPInstanceUID'</span>: ds.file_meta.MediaStorageSOPInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'MediaStorageSOPClassUID'</span>: ds.file_meta.MediaStorageSOPClassUID,</span><br><span class=\"line\">            <span class=\"string\">'ImplementationClassUID'</span>: ds.file_meta.ImplementationClassUID,</span><br><span class=\"line\">            <span class=\"string\">'PatientName'</span>: ds.PatientName,</span><br><span class=\"line\">            <span class=\"string\">'PatientID'</span>: ds.PatientID,</span><br><span class=\"line\">            <span class=\"string\">'PatientSex'</span>: ds.PatientSex,</span><br><span class=\"line\">            <span class=\"string\">'PatientBirthDate'</span>: ds.PatientBirthDate,</span><br><span class=\"line\">            <span class=\"string\">'PatientAge'</span>: ds.PatientAge,</span><br><span class=\"line\">            <span class=\"string\">'ContentDate'</span>: ds.ContentDate,</span><br><span class=\"line\">            <span class=\"string\">'ContentTime'</span>: ds.ContentTime,</span><br><span class=\"line\">            <span class=\"string\">'SOPClassUID'</span>: ds.SOPClassUID,</span><br><span class=\"line\">            <span class=\"string\">'SOPInstanceUID'</span>: ds.SOPInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'StudyInstanceUID'</span>: ds.StudyInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'SeriesInstanceUID'</span>: ds.SeriesInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'InstanceNumber'</span>: ds.InstanceNumber,</span><br><span class=\"line\">            <span class=\"string\">'SeriesNumber'</span>: ds.SeriesNumber,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        info_list.append(info_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 根据InstanceUID排序</span></span><br><span class=\"line\">    sort_list = sorted(info_list, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">'MediaStorageSOPInstanceUID'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sort_list[<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将pdf报告转换后的图片数据写入DICOM影像，并放到原始DICOM文件夹中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_dcm</span><span class=\"params\">(index, img, dicom, dicom_dir)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 用于将InstanceUID尾数加1</span></span><br><span class=\"line\">    chguid = <span class=\"keyword\">lambda</span> x: x.replace(x[<span class=\"number\">-1</span>], str(int(x[<span class=\"number\">-1</span>]) + index + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建临时文件名</span></span><br><span class=\"line\">    suffix = <span class=\"string\">'.dcm'</span></span><br><span class=\"line\">    filename_little_endian = tempfile.NamedTemporaryFile(suffix=suffix).name</span><br><span class=\"line\">    <span class=\"comment\"># filename_big_endian = tempfile.NamedTemporaryFile(suffix=suffix).name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 填充DICOM文件头必要信息</span></span><br><span class=\"line\">    file_meta = Dataset()</span><br><span class=\"line\">    file_meta.MediaStorageSOPClassUID = dicom[<span class=\"string\">'MediaStorageSOPClassUID'</span>]</span><br><span class=\"line\">    file_meta.MediaStorageSOPInstanceUID = chguid(dicom[<span class=\"string\">'MediaStorageSOPInstanceUID'</span>])</span><br><span class=\"line\">    file_meta.ImplementationClassUID = dicom[<span class=\"string\">'ImplementationClassUID'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个FileDataset实例，初始时没有影像数据，只提供文件头(file meta)</span></span><br><span class=\"line\">    ds = FileDataset(filename_little_endian, &#123;&#125;, file_meta=file_meta, preamble=<span class=\"string\">b\"\\0\"</span> * <span class=\"number\">128</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加入DICOM tag信息（不包含所有）</span></span><br><span class=\"line\">    ds.PatientName = dicom[<span class=\"string\">'PatientName'</span>]</span><br><span class=\"line\">    ds.PatientID = dicom[<span class=\"string\">'PatientID'</span>]</span><br><span class=\"line\">    ds.PatientSex = dicom[<span class=\"string\">'PatientSex'</span>]</span><br><span class=\"line\">    ds.PatientBirthDate = dicom[<span class=\"string\">'PatientBirthDate'</span>]</span><br><span class=\"line\">    ds.PatientAge = dicom[<span class=\"string\">'PatientAge'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Set the transfer syntax</span></span><br><span class=\"line\">    <span class=\"comment\"># ds.is_little_endian = True</span></span><br><span class=\"line\">    <span class=\"comment\"># ds.is_implicit_VR = True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加入DICOM tag信息（不包含所有）</span></span><br><span class=\"line\">    dt = datetime.datetime.now()</span><br><span class=\"line\">    ds.ContentDate = dt</span><br><span class=\"line\">    time_str = dt.strftime(<span class=\"string\">'%H%M%S.%f'</span>)</span><br><span class=\"line\">    ds.ContentTime = time_str</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 生成StudyUID, SeriesUID, InstanceUID</span></span><br><span class=\"line\">    ds.SOPClassUID = dicom[<span class=\"string\">'SOPClassUID'</span>]</span><br><span class=\"line\">    ds.SOPInstanceUID = chguid(dicom[<span class=\"string\">'SOPInstanceUID'</span>])</span><br><span class=\"line\">    ds.StudyInstanceUID = dicom[<span class=\"string\">'StudyInstanceUID'</span>]</span><br><span class=\"line\">    ds.SeriesInstanceUID = dicom[<span class=\"string\">'SeriesInstanceUID'</span>] + <span class=\"string\">'.1'</span></span><br><span class=\"line\">    ds.InstanceNumber = index + <span class=\"number\">1</span></span><br><span class=\"line\">    ds.SeriesNumber = str(int(dicom[<span class=\"string\">'SeriesNumber'</span>]) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 指定影像参数</span></span><br><span class=\"line\">    ds.Rows = img.size[<span class=\"number\">1</span>]</span><br><span class=\"line\">    ds.Columns = img.size[<span class=\"number\">0</span>]</span><br><span class=\"line\">    ds.SamplesPerPixel = <span class=\"number\">3</span></span><br><span class=\"line\">    ds.PhotometricInterpretation = <span class=\"string\">\"RGB\"</span></span><br><span class=\"line\">    ds.HighBit = <span class=\"number\">7</span></span><br><span class=\"line\">    ds.BitsStored = <span class=\"number\">8</span></span><br><span class=\"line\">    ds.BitsAllocated = <span class=\"number\">8</span></span><br><span class=\"line\">    ds.PixelRepresentation = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将img对象转换为bytes类型，写入PixelData字段</span></span><br><span class=\"line\">    ds.PixelData = img.tobytes()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 指定TransferSyntax等信息</span></span><br><span class=\"line\">    ds.file_meta.TransferSyntaxUID = pydicom.uid.ExplicitVRBigEndian</span><br><span class=\"line\">    ds.is_little_endian = <span class=\"literal\">False</span></span><br><span class=\"line\">    ds.is_implicit_VR = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 保存影像文件</span></span><br><span class=\"line\">    file_name = <span class=\"string\">'report_&#123;&#125;.dcm'</span>.format(index)</span><br><span class=\"line\">    file_path = os.path.join(dicom_dir, file_name)</span><br><span class=\"line\">    ds.save_as(file_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(pdf_path, dicom_dir)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 将pdf转换为图片</span></span><br><span class=\"line\">    images_list = convert_from_path(pdf_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 从DICOM文件夹中读取最后一张影像的信息</span></span><br><span class=\"line\">    dicom_info = read_dcm(dicom_dir)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建DICOM影像并写入图片数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, img <span class=\"keyword\">in</span> enumerate(images_list):</span><br><span class=\"line\">        write_dcm(index, img, dicom_info, dicom_dir)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    pdf_path = <span class=\"string\">'/home/ray/dcm_report/report.pdf'</span></span><br><span class=\"line\">    dicom_dir = <span class=\"string\">'/home/ray/dcm_report/dcm_data'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    main(pdf_path, dicom_dir)</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<p>由于公司业务需要，尝试将AI辅助诊断报告（PDF格式）转换为DICOM格式，这样，当DICOM影像上传到云平台计算完成后，可以将生成的AI辅助诊断报告推送到医院PACS系统，医生就可以在DICOM viewer中同时看到病人原始影像和AI报告。</p>","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>DICOM影像通常分为三个层级：<code>Study</code>、<code>Series</code>、<code>Instance</code>，其中Study代表病人一次检查的全部影像，通常放在一个文件夹内，而Series则代表这次检查中的不同影像序列，每个序列的扫描参数、用途各有差异，而Instance则是代表每张影像的实体。为了区分影像，DICOM标准中对于Study、Series、Intance的序号（UID）命名有着明确的规范，另外对于影像的编码格式、传输语法以及影像信息都有要求，在创建DICOM影像时都要注意。</p>\n<p>DICOM tag信息主要分为三大部分，第一部分File Meta文件头，指定了影像最重要的基本信息，包含编码格式、传输语法等信息，第二部分则是常规的病人信息、影像信息字段，而影像的像素数据则保存在第三部分<code>Pixel Data</code>字段中。</p>\n<p>为了将PDF报告转换成DICOM格式，可以先利用<code>pdf2image</code>将PDF转换为常见的图片格式，再将图片转换为<code>bytes</code>类型数据，写入DICOM tag中的<code>Pixel Data</code>字段，同时还需要给这些创建的DICOM影像指定UID、编码格式、传输语法等Tag信息。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>以下是PDF转DICOM的参考代码，注意这里的应用情况是将PDF转换后的DICOM影像写入到原始DICOM文件夹中，支持含有多页的PDF文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> tempfile</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> pydicom</span><br><span class=\"line\"><span class=\"keyword\">from</span> pydicom.dataset <span class=\"keyword\">import</span> Dataset, FileDataset</span><br><span class=\"line\"><span class=\"keyword\">from</span> pdf2image <span class=\"keyword\">import</span> convert_from_path</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从DICOM study文件夹中读取影像，返回最后一张（InstanceUID最大的一张）影像信息的字典</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_dcm</span><span class=\"params\">(dicom_dir)</span>:</span></span><br><span class=\"line\">    dicom_list = os.listdir(dicom_dir)</span><br><span class=\"line\">    info_list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dicom <span class=\"keyword\">in</span> dicom_list:</span><br><span class=\"line\">        <span class=\"comment\"># 使用pydicom读取DICOM影像信息</span></span><br><span class=\"line\">        ds = pydicom.dcmread(os.path.join(dicom_dir, dicom))</span><br><span class=\"line\"></span><br><span class=\"line\">        info_dict = &#123;</span><br><span class=\"line\">            <span class=\"string\">'MediaStorageSOPInstanceUID'</span>: ds.file_meta.MediaStorageSOPInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'MediaStorageSOPClassUID'</span>: ds.file_meta.MediaStorageSOPClassUID,</span><br><span class=\"line\">            <span class=\"string\">'ImplementationClassUID'</span>: ds.file_meta.ImplementationClassUID,</span><br><span class=\"line\">            <span class=\"string\">'PatientName'</span>: ds.PatientName,</span><br><span class=\"line\">            <span class=\"string\">'PatientID'</span>: ds.PatientID,</span><br><span class=\"line\">            <span class=\"string\">'PatientSex'</span>: ds.PatientSex,</span><br><span class=\"line\">            <span class=\"string\">'PatientBirthDate'</span>: ds.PatientBirthDate,</span><br><span class=\"line\">            <span class=\"string\">'PatientAge'</span>: ds.PatientAge,</span><br><span class=\"line\">            <span class=\"string\">'ContentDate'</span>: ds.ContentDate,</span><br><span class=\"line\">            <span class=\"string\">'ContentTime'</span>: ds.ContentTime,</span><br><span class=\"line\">            <span class=\"string\">'SOPClassUID'</span>: ds.SOPClassUID,</span><br><span class=\"line\">            <span class=\"string\">'SOPInstanceUID'</span>: ds.SOPInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'StudyInstanceUID'</span>: ds.StudyInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'SeriesInstanceUID'</span>: ds.SeriesInstanceUID,</span><br><span class=\"line\">            <span class=\"string\">'InstanceNumber'</span>: ds.InstanceNumber,</span><br><span class=\"line\">            <span class=\"string\">'SeriesNumber'</span>: ds.SeriesNumber,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        info_list.append(info_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 根据InstanceUID排序</span></span><br><span class=\"line\">    sort_list = sorted(info_list, key=<span class=\"keyword\">lambda</span> x: x[<span class=\"string\">'MediaStorageSOPInstanceUID'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sort_list[<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将pdf报告转换后的图片数据写入DICOM影像，并放到原始DICOM文件夹中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_dcm</span><span class=\"params\">(index, img, dicom, dicom_dir)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 用于将InstanceUID尾数加1</span></span><br><span class=\"line\">    chguid = <span class=\"keyword\">lambda</span> x: x.replace(x[<span class=\"number\">-1</span>], str(int(x[<span class=\"number\">-1</span>]) + index + <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建临时文件名</span></span><br><span class=\"line\">    suffix = <span class=\"string\">'.dcm'</span></span><br><span class=\"line\">    filename_little_endian = tempfile.NamedTemporaryFile(suffix=suffix).name</span><br><span class=\"line\">    <span class=\"comment\"># filename_big_endian = tempfile.NamedTemporaryFile(suffix=suffix).name</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 填充DICOM文件头必要信息</span></span><br><span class=\"line\">    file_meta = Dataset()</span><br><span class=\"line\">    file_meta.MediaStorageSOPClassUID = dicom[<span class=\"string\">'MediaStorageSOPClassUID'</span>]</span><br><span class=\"line\">    file_meta.MediaStorageSOPInstanceUID = chguid(dicom[<span class=\"string\">'MediaStorageSOPInstanceUID'</span>])</span><br><span class=\"line\">    file_meta.ImplementationClassUID = dicom[<span class=\"string\">'ImplementationClassUID'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个FileDataset实例，初始时没有影像数据，只提供文件头(file meta)</span></span><br><span class=\"line\">    ds = FileDataset(filename_little_endian, &#123;&#125;, file_meta=file_meta, preamble=<span class=\"string\">b\"\\0\"</span> * <span class=\"number\">128</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加入DICOM tag信息（不包含所有）</span></span><br><span class=\"line\">    ds.PatientName = dicom[<span class=\"string\">'PatientName'</span>]</span><br><span class=\"line\">    ds.PatientID = dicom[<span class=\"string\">'PatientID'</span>]</span><br><span class=\"line\">    ds.PatientSex = dicom[<span class=\"string\">'PatientSex'</span>]</span><br><span class=\"line\">    ds.PatientBirthDate = dicom[<span class=\"string\">'PatientBirthDate'</span>]</span><br><span class=\"line\">    ds.PatientAge = dicom[<span class=\"string\">'PatientAge'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Set the transfer syntax</span></span><br><span class=\"line\">    <span class=\"comment\"># ds.is_little_endian = True</span></span><br><span class=\"line\">    <span class=\"comment\"># ds.is_implicit_VR = True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加入DICOM tag信息（不包含所有）</span></span><br><span class=\"line\">    dt = datetime.datetime.now()</span><br><span class=\"line\">    ds.ContentDate = dt</span><br><span class=\"line\">    time_str = dt.strftime(<span class=\"string\">'%H%M%S.%f'</span>)</span><br><span class=\"line\">    ds.ContentTime = time_str</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 生成StudyUID, SeriesUID, InstanceUID</span></span><br><span class=\"line\">    ds.SOPClassUID = dicom[<span class=\"string\">'SOPClassUID'</span>]</span><br><span class=\"line\">    ds.SOPInstanceUID = chguid(dicom[<span class=\"string\">'SOPInstanceUID'</span>])</span><br><span class=\"line\">    ds.StudyInstanceUID = dicom[<span class=\"string\">'StudyInstanceUID'</span>]</span><br><span class=\"line\">    ds.SeriesInstanceUID = dicom[<span class=\"string\">'SeriesInstanceUID'</span>] + <span class=\"string\">'.1'</span></span><br><span class=\"line\">    ds.InstanceNumber = index + <span class=\"number\">1</span></span><br><span class=\"line\">    ds.SeriesNumber = str(int(dicom[<span class=\"string\">'SeriesNumber'</span>]) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 指定影像参数</span></span><br><span class=\"line\">    ds.Rows = img.size[<span class=\"number\">1</span>]</span><br><span class=\"line\">    ds.Columns = img.size[<span class=\"number\">0</span>]</span><br><span class=\"line\">    ds.SamplesPerPixel = <span class=\"number\">3</span></span><br><span class=\"line\">    ds.PhotometricInterpretation = <span class=\"string\">\"RGB\"</span></span><br><span class=\"line\">    ds.HighBit = <span class=\"number\">7</span></span><br><span class=\"line\">    ds.BitsStored = <span class=\"number\">8</span></span><br><span class=\"line\">    ds.BitsAllocated = <span class=\"number\">8</span></span><br><span class=\"line\">    ds.PixelRepresentation = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将img对象转换为bytes类型，写入PixelData字段</span></span><br><span class=\"line\">    ds.PixelData = img.tobytes()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 指定TransferSyntax等信息</span></span><br><span class=\"line\">    ds.file_meta.TransferSyntaxUID = pydicom.uid.ExplicitVRBigEndian</span><br><span class=\"line\">    ds.is_little_endian = <span class=\"literal\">False</span></span><br><span class=\"line\">    ds.is_implicit_VR = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 保存影像文件</span></span><br><span class=\"line\">    file_name = <span class=\"string\">'report_&#123;&#125;.dcm'</span>.format(index)</span><br><span class=\"line\">    file_path = os.path.join(dicom_dir, file_name)</span><br><span class=\"line\">    ds.save_as(file_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(pdf_path, dicom_dir)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 将pdf转换为图片</span></span><br><span class=\"line\">    images_list = convert_from_path(pdf_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 从DICOM文件夹中读取最后一张影像的信息</span></span><br><span class=\"line\">    dicom_info = read_dcm(dicom_dir)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建DICOM影像并写入图片数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index, img <span class=\"keyword\">in</span> enumerate(images_list):</span><br><span class=\"line\">        write_dcm(index, img, dicom_info, dicom_dir)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    pdf_path = <span class=\"string\">'/home/ray/dcm_report/report.pdf'</span></span><br><span class=\"line\">    dicom_dir = <span class=\"string\">'/home/ray/dcm_report/dcm_data'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    main(pdf_path, dicom_dir)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck555p4z80000osab83uq6rj4","category_id":"ck555p4zz0004osab58qycenb","_id":"ck555p50i000eosab4k7l0zam"},{"post_id":"ck555p50d000aosab0yqy99az","category_id":"ck555p4zz0004osab58qycenb","_id":"ck555p50m000hosabhcsi2pcz"},{"post_id":"ck555p50g000dosabhn6u83w6","category_id":"ck555p4zz0004osab58qycenb","_id":"ck555p50m000iosab8s8m5xpt"},{"post_id":"ck555p4zn0002osabcndj62mk","category_id":"ck555p50e000bosab92zg5fdo","_id":"ck555p50p000losab0tkze5n2"},{"post_id":"ck555p5050006osabgnw33pcf","category_id":"ck555p50e000bosab92zg5fdo","_id":"ck555p50p000nosab1wvs5iyy"},{"post_id":"ck555p5090008osab4x2ka43p","category_id":"ck555p50m000josab8miwa740","_id":"ck555p50r000rosabedzae60z"},{"post_id":"ck567smzu0000fcab91tf50be","category_id":"ck555p4zz0004osab58qycenb","_id":"ck567sn040003fcabe8o0aset"}],"PostTag":[{"post_id":"ck555p4z80000osab83uq6rj4","tag_id":"ck555p5010005osabbhvsawti","_id":"ck555p50p000mosabg5ynbtig"},{"post_id":"ck555p4z80000osab83uq6rj4","tag_id":"ck555p50f000cosabf3tv3ppu","_id":"ck555p50p000oosab76ejfm5s"},{"post_id":"ck555p4z80000osab83uq6rj4","tag_id":"ck555p50j000gosabbibo1p6v","_id":"ck555p50r000qosab0p3ia13x"},{"post_id":"ck555p4zn0002osabcndj62mk","tag_id":"ck555p50o000kosabge4m0mr0","_id":"ck555p50t000tosab6z1jels5"},{"post_id":"ck555p4zn0002osabcndj62mk","tag_id":"ck555p50f000cosabf3tv3ppu","_id":"ck555p50t000uosabb89hc75y"},{"post_id":"ck555p5050006osabgnw33pcf","tag_id":"ck555p50o000kosabge4m0mr0","_id":"ck555p50u000wosab947i6xqn"},{"post_id":"ck555p5090008osab4x2ka43p","tag_id":"ck555p50u000vosabbsu2167z","_id":"ck555p50y0010osab8n9oefz2"},{"post_id":"ck555p5090008osab4x2ka43p","tag_id":"ck555p50o000kosabge4m0mr0","_id":"ck555p50y0011osab39h9d088"},{"post_id":"ck555p5090008osab4x2ka43p","tag_id":"ck555p50w000yosab0kde9g1b","_id":"ck555p50z0013osab7y46gj0b"},{"post_id":"ck555p50d000aosab0yqy99az","tag_id":"ck555p50x000zosabeeudcgr8","_id":"ck555p5110015osab9ud98grf"},{"post_id":"ck555p50d000aosab0yqy99az","tag_id":"ck555p50z0012osab4lhyht65","_id":"ck555p5110016osabdyl4fuvc"},{"post_id":"ck555p50d000aosab0yqy99az","tag_id":"ck555p5010005osabbhvsawti","_id":"ck555p5110017osab40vo3bh8"},{"post_id":"ck555p50g000dosabhn6u83w6","tag_id":"ck555p5100014osab4ic07cg3","_id":"ck555p5120018osabeuiu71w6"},{"post_id":"ck555p50g000dosabhn6u83w6","tag_id":"ck555p5010005osabbhvsawti","_id":"ck555p5120019osabb5j23gi1"},{"post_id":"ck555p50g000dosabhn6u83w6","tag_id":"ck555p50f000cosabf3tv3ppu","_id":"ck555p513001aosab6sow3zmy"},{"post_id":"ck567smzu0000fcab91tf50be","tag_id":"ck555p5010005osabbhvsawti","_id":"ck567sn030001fcab41835ubs"},{"post_id":"ck567smzu0000fcab91tf50be","tag_id":"ck555p50f000cosabf3tv3ppu","_id":"ck567sn040002fcab2q8y4ws3"}],"Tag":[{"name":"DICOM","_id":"ck555p5010005osabbhvsawti"},{"name":"Python","_id":"ck555p50f000cosabf3tv3ppu"},{"name":"pydicom","_id":"ck555p50j000gosabbibo1p6v"},{"name":"Django","_id":"ck555p50o000kosabge4m0mr0"},{"name":"Docker","_id":"ck555p50u000vosabbsu2167z"},{"name":"Nginx","_id":"ck555p50w000yosab0kde9g1b"},{"name":"Orthanc","_id":"ck555p50x000zosabeeudcgr8"},{"name":"OHIF","_id":"ck555p50z0012osab4lhyht65"},{"name":"SimpleITK","_id":"ck555p5100014osab4ic07cg3"}]}}